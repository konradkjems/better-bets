{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/lib/calculator.ts"],"sourcesContent":["// Calculator module for React integration\n\nexport interface BookmakerInfo {\n    name: string;\n    fixedStake: number;\n    hasBonus: boolean;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    bonusType?: 'freebet' | 'matchingBonus' | 'none';\n    bonusAmount?: number;\n    bonusMinOdds?: number;\n    qualifyingBetAmount?: number;\n    isBonusLocked?: boolean;\n    usedInBet1?: boolean;\n    bonusOnlyIfLost?: boolean;\n    bet1Lost?: boolean;\n    bet1Balance?: number;\n    bet1Profit?: number;\n    odds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface TeamNames {\n    team1: string;\n    team2: string;\n}\n\nexport interface BookmakerOdds {\n    name: string;\n    team1: number;\n    draw: number;\n    team2: number;\n    fixedStake: number;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    betType?: 'team1' | 'draw' | 'team2';\n    originalOdds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    favoritType?: 'team1' | 'team2';\n    underdogType?: 'team1' | 'team2';\n    returns?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface Customer {\n    id: string;\n    name: string;\n    bookmakers: BookmakerInfo[];\n    teamNames?: TeamNames;\n    betType: 'qualifying' | 'bonus';\n}\n\nexport interface ArbitrageResult {\n    allBookmakers: {\n        name: string;\n        team1Odds: number;\n        drawOdds: number;\n        team2Odds: number;\n        fixedStake: number;\n        actualCost: number;\n        minOdds: number;\n        betType: 'team1' | 'draw' | 'team2';\n        potentialReturn: number;\n    }[];\n    totalStake: number;\n    totalActualCost: number;\n    potentialReturns: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    profit: number;\n    profitPercentage: number;\n    isArbitrage: boolean;\n}\n\nconst BOOKMAKERS: BookmakerInfo[] = [\n    { name: 'Unibet', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.4, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.4, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet365', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.2, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.2, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'LeoVegas', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'ComeOn', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.8, preferLoss: true, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Mr Green', fixedStake: 300, hasBonus: false, actualCost: 300, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 300, bonusMinOdds: 1.8, qualifyingBetAmount: 300, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'NordicBet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bwin', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: '888sport', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 2.0, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 2.0, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet25', fixedStake: 250, hasBonus: false, actualCost: 250, minOdds: 1.95, isActive: true, bonusType: 'matchingBonus', bonusAmount: 250, bonusMinOdds: 1.95, qualifyingBetAmount: 250, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Expekt', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.5, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.5, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'Cashpoint', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Jackpotbet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.5, isActive: true, bonusType: 'matchingBonus', bonusAmount: 500, bonusMinOdds: 1.5, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Getlucky', fixedStake: 100, hasBonus: false, actualCost: 100, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 100, bonusMinOdds: 1.8, qualifyingBetAmount: 100, usedInBet1: true, bonusOnlyIfLost: false }\n];\n\n// Global state\nlet customers: Customer[] = [];\nlet currentCustomerId: string | null = null;\nlet currentBetType: 'qualifying' | 'bonus' = 'qualifying';\nlet lastCalculatedResult: ArbitrageResult | null = null;\n\nexport function getCurrentCustomer(): Customer {\n    return customers.find(c => c.id === currentCustomerId) || customers[0];\n}\n\nexport function generateBookmakerId(bookmakerName: string): string {\n    return bookmakerName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n}\n\n// Core arbitrage calculation function\nexport function calculateArbitrage(oddsData: BookmakerOdds[], customer: Customer): ArbitrageResult {\n    const isQualifyingBet = customer.betType === 'qualifying';\n\n    // Beregn potentielle returns for hver bookmaker for hvert udfald\n    const bookmakerReturns = oddsData.map(bm => {\n        const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n\n        // Opdater calculateReturn til at tjekke for freebet uafhængigt af betType\n        const calculateReturn = (odds: number, stake: number, isFreebet: boolean) => {\n            if (isFreebet) {\n                return (odds - 1) * stake; // Kun gevinst, ikke indsats tilbage for freebets\n            }\n            return odds * stake; // Normal beregning\n        };\n\n        // Find det laveste odds (favorit) for denne bookmaker\n        const team1Odds = bm.team1 || Infinity;\n        const team2Odds = bm.team2 || Infinity;\n        const favoritType = team1Odds <= team2Odds ? 'team1' as const : 'team2' as const;\n        const underdogType = team1Odds <= team2Odds ? 'team2' as const : 'team1' as const;\n\n        // Kald calculateReturn med isFreebet parameter\n        return {\n            ...bm,\n            favoritType,\n            underdogType,\n            returns: {\n                team1: calculateReturn(bm.team1, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                draw: calculateReturn(bm.draw, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                team2: calculateReturn(bm.team2, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet')\n            }\n        };\n    });\n\n    // Find target return (gennemsnit af alle mulige returns)\n    const totalPossibleReturn = bookmakerReturns.reduce((sum, bm) => \n        sum + (bm.returns?.team1 || 0) + (bm.returns?.draw || 0) + (bm.returns?.team2 || 0), 0);\n    const targetReturnPerOutcome = totalPossibleReturn / 3;\n\n    let bestDistribution = {\n        team1: [] as BookmakerOdds[],\n        draw: [] as BookmakerOdds[],\n        team2: [] as BookmakerOdds[],\n        deviation: Infinity\n    };\n\n    // Funktion til at evaluere en distribution\n    const evaluateDistribution = (team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]): number => {\n        const calculateReturnForBet = (bm: BookmakerOdds, odds: number) => {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n            if (!isQualifyingBet && bookmakerInfo?.bonusType === 'freebet') {\n                return (odds - 1) * bm.fixedStake;\n            }\n            return odds * bm.fixedStake;\n        };\n\n        const team1Return = team1.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team1), 0);\n        const drawReturn = draw.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.draw), 0);\n        const team2Return = team2.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team2), 0);\n\n        // Beregn afvigelse fra target\n        const maxReturn = Math.max(team1Return, drawReturn, team2Return);\n        const minReturn = Math.min(team1Return, drawReturn, team2Return);\n        const avgReturn = (team1Return + drawReturn + team2Return) / 3;\n\n        // Straf større afvigelser hårdere ved at kvadrere forskellen\n        const baseDeviation = Math.pow(maxReturn - minReturn, 2) + \n                            Math.pow(Math.abs(team1Return - avgReturn), 2) +\n                            Math.pow(Math.abs(drawReturn - avgReturn), 2) +\n                            Math.pow(Math.abs(team2Return - avgReturn), 2);\n\n        let penalty = 0;\n\n        // Specialregler for kvalificerende bets\n        if (isQualifyingBet) {\n            // Tæl \"kun hvis tab\"-freebets på hvert udfald\n            const bonusOnlyIfLostFreebets = [...team1, ...draw, ...team2].filter(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                return bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet';\n            });\n            \n            const team1BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team1').length;\n            const drawBonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'draw').length;\n            const team2BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team2').length;\n            \n            // Straf hvis \"kun hvis tab\"-freebets ikke er balanceret fordelt\n            const totalBonusOnlyIfLost = team1BonusOnlyIfLost + drawBonusOnlyIfLost + team2BonusOnlyIfLost;\n            if (totalBonusOnlyIfLost > 0) {\n                const idealPerOutcome = totalBonusOnlyIfLost / 3;\n                const deviation = Math.abs(team1BonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(drawBonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(team2BonusOnlyIfLost - idealPerOutcome);\n                penalty += deviation * 10000; // Stor straf for ubalanceret fordeling\n            }\n\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // Straf hvis vi bruger en bookmaker uden bonus i kvalificerende fase\n                if (!bookmakerInfo?.bonusType || bookmakerInfo.bonusType === 'none') {\n                    penalty += 5000;\n                }\n\n                // Tjek om odds er over minimum for bonus\n                if (bookmakerInfo?.bonusMinOdds) {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    if (placedOdds < bookmakerInfo.bonusMinOdds) {\n                        penalty += 10000; // Stor straf hvis odds er under minimum for bonus\n                    }\n                }\n\n                // Specialregel for \"kun hvis tabt\" bonusser - vi vil gerne tabe på disse bookmakere\n                if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                    // Find den højeste odds (underdog) for denne bookmaker\n                    const team1Odds = bm.team1 || 0;\n                    const team2Odds = bm.team2 || 0;\n                    const underdogType = team1Odds >= team2Odds ? 'team1' : 'team2';\n                    \n                    // Hvis vi spiller på underdog'en (laveste sandsynlighed for gevinst), giv bonus\n                    if (bm.betType === underdogType) {\n                        penalty -= 2000; // Bonus for at spille på underdog'en\n                    } else {\n                        penalty += 5000; // Straf for at spille på favoritten\n                    }\n                }\n            });\n        }\n\n        // Specialregler for bonus bets (freebets)\n        if (!isQualifyingBet) {\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // For freebets vil vi gerne have højere odds for at maksimere gevinst\n                // men stadig holde det balanceret\n                if (bookmakerInfo?.bonusType === 'freebet') {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    // Mindre aggressiv bonus for højere odds\n                    penalty -= (placedOdds - bookmakerInfo.minOdds) * 100;\n                }\n\n                // Straf for meget ubalancerede returns i Bet 2\n                const returnSpread = maxReturn - minReturn;\n                if (returnSpread > avgReturn * 0.1) { // Hvis spredningen er mere end 10% af gennemsnittet\n                    penalty += Math.pow(returnSpread, 2);\n                }\n            });\n        }\n\n        // Generelle regler for alle typer bets\n        const comeOnBet = [...team1, ...draw, ...team2].find(bm => bm.name === 'ComeOn');\n        if (comeOnBet) {\n            const comeOnData = bookmakerReturns.find(bm => bm.name === 'ComeOn');\n            if (comeOnData) {\n                const isOnFavorit = comeOnBet.betType === comeOnData.favoritType;\n                const isOnDraw = comeOnBet.betType === 'draw';\n                if (isOnFavorit || isOnDraw) {\n                    penalty += 50000;\n                }\n            }\n        }\n\n        return baseDeviation + penalty;\n    };\n\n    // Prøv forskellige kombinationer\n    const tryDistribution = (remaining: typeof bookmakerReturns, team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]) => {\n        if (remaining.length === 0) {\n            const deviation = evaluateDistribution(team1, draw, team2);\n            if (deviation < bestDistribution.deviation) {\n                bestDistribution = { team1, draw, team2, deviation };\n            }\n            return;\n        }\n\n        const [current, ...rest] = remaining;\n        \n        // Beregn nuværende returns for hver gruppe\n        const currentTeam1 = team1.reduce((sum, bm) => sum + bm.team1 * bm.fixedStake, 0);\n        const currentDraw = draw.reduce((sum, bm) => sum + bm.draw * bm.fixedStake, 0);\n        const currentTeam2 = team2.reduce((sum, bm) => sum + bm.team2 * bm.fixedStake, 0);\n\n        // Specialhåndtering for ComeOn - skal altid på det modsatte hold af favoritten\n        if (current.name === 'ComeOn') {\n            const team1Odds = current.team1 || Infinity;\n            const team2Odds = current.team2 || Infinity;\n            \n            // Find ud af hvilket hold der er favoritten (laveste odds)\n            const favoritType = team1Odds <= team2Odds ? 'team1' : 'team2';\n            \n            // Placer ComeOn på det modsatte hold af favoritten\n            if (favoritType === 'team1' && current.team2 > 0) {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            } else if (favoritType === 'team2' && current.team1 > 0) {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            }\n            return;\n        }\n\n        // Prioriter placering baseret på bookmaker præferencer\n        let priorities: Array<{ type: 'team1' | 'draw' | 'team2'; need: number; odds: number; current: BookmakerOdds[] }> = [];\n        \n        // Specialhåndtering for \"kun hvis tab\"-freebets i kvalificerende bets\n        if (isQualifyingBet) {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === current.name);\n            if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                // Tæl hvor mange \"kun hvis tab\"-freebets der allerede er på hvert udfald\n                const existingBonusOnlyIfLost = [...team1, ...draw, ...team2].filter(bm => {\n                    const bmInfo = customer.bookmakers.find(b => b.name === bm.name);\n                    return bmInfo?.bonusOnlyIfLost && bmInfo.bonusType === 'freebet';\n                });\n                \n                const team1Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team1').length;\n                const drawCount = existingBonusOnlyIfLost.filter(bm => bm.betType === 'draw').length;\n                const team2Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team2').length;\n                \n                // Prioriter det udfald der har færrest \"kun hvis tab\"-freebets\n                priorities = [\n                    { type: 'team1' as const, need: -team1Count, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -drawCount, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -team2Count, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need); // Laveste count først\n            }\n        }\n        \n        // Hvis der ikke er sat nogen prioriteter endnu, brug standard logik\n        if (priorities.length === 0) {\n            if (current.preferLoss) {\n                // For bookmakere der foretrækker tab, placer dem hvor der er lavest return\n                priorities = [\n                    { type: 'team1' as const, need: -currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need);\n            } else {\n                // For normale bookmakere, placer dem hvor der er størst behov\n                priorities = [\n                    { type: 'team1' as const, need: targetReturnPerOutcome - currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: targetReturnPerOutcome - currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: targetReturnPerOutcome - currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => b.need - a.need);\n            }\n        }\n\n        // Hvis der ikke er nogen gyldige muligheder, spring denne bookmaker over\n        if (priorities.length === 0) return;\n\n        // Prøv fordelingerne i prioriteret rækkefølge\n        for (const group of priorities) {\n            if (group.type === 'team1') {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            } else if (group.type === 'draw') {\n                tryDistribution(rest, team1, [...draw, current], team2);\n            } else {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            }\n        }\n    };\n\n    tryDistribution(bookmakerReturns, [], [], []);\n\n    // Konverter den bedste fordeling til det forventede format\n    const allBookmakers = oddsData.map(bm => {\n        let betType: 'team1' | 'draw' | 'team2';\n        let potentialReturn: number;\n\n        if (bestDistribution.team1.find(b => b.name === bm.name)) {\n            betType = 'team1';\n            potentialReturn = bm.team1 * bm.fixedStake;\n        } else if (bestDistribution.draw.find(b => b.name === bm.name)) {\n            betType = 'draw';\n            potentialReturn = bm.draw * bm.fixedStake;\n        } else {\n            betType = 'team2';\n            potentialReturn = bm.team2 * bm.fixedStake;\n        }\n\n        return {\n            name: bm.name,\n            team1Odds: bm.team1,\n            drawOdds: bm.draw,\n            team2Odds: bm.team2,\n            fixedStake: bm.fixedStake,\n            actualCost: bm.actualCost,\n            minOdds: bm.minOdds,\n            preferLoss: bm.preferLoss,\n            avoidWin: bm.avoidWin,\n            betType,\n            potentialReturn\n        };\n    });\n\n    const totalStake = allBookmakers.reduce((sum, bm) => sum + bm.fixedStake, 0);\n    const totalActualCost = allBookmakers.reduce((sum, bm) => sum + bm.actualCost, 0);\n\n    const potentialReturns = {\n        team1: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team1' ? bm.potentialReturn : 0), 0),\n        draw: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'draw' ? bm.potentialReturn : 0), 0),\n        team2: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team2' ? bm.potentialReturn : 0), 0)\n    };\n\n    const minReturn = Math.min(\n        potentialReturns.team1,\n        potentialReturns.draw,\n        potentialReturns.team2\n    );\n\n    const profit = minReturn - totalActualCost;\n    const profitPercentage = (profit / totalActualCost) * 100;\n    const isArbitrage = profit > 0;\n\n    return {\n        allBookmakers,\n        totalStake,\n        totalActualCost,\n        potentialReturns,\n        profit,\n        profitPercentage,\n        isArbitrage\n    };\n}\n\n// Utility function to gather odds data from customer bookmakers\nexport function gatherOddsData(customer: Customer): BookmakerOdds[] {\n    const isBet2 = customer.betType === 'bonus';\n\n    return customer.bookmakers.map(bookmaker => {\n        const odds = bookmaker.odds || { team1: 0, draw: 0, team2: 0 };\n\n        // Bestem stake og actual cost baseret på bet type og bonus type\n        let stake = bookmaker.fixedStake;\n        let actualCost = bookmaker.actualCost;\n\n        if (isBet2) {\n            if (!bookmaker.usedInBet1) {\n                // Hvis siden ikke blev brugt i Bet 1, skal den ikke inkluderes\n                stake = 0;\n                actualCost = 0;\n            } else if (bookmaker.bonusType === 'matchingBonus') {\n                // For matching bonus, brug den indtastede saldo\n                stake = bookmaker.bet1Balance || 0;\n                // Actual cost skal være lig med den oprindelige indbetaling, uanset saldo\n                actualCost = bookmaker.qualifyingBetAmount || 0;\n            } else if (bookmaker.bonusType === 'freebet') {\n                // For freebets, tjek om bonus er tilgængelig\n                if (bookmaker.bonusOnlyIfLost && bookmaker.bet1Lost === false) {\n                    // Hvis bonus kun gives ved tab, men vi vandt, så ingen bonus\n                    stake = 0;\n                    actualCost = 0;\n                } else {\n                    // For freebets, brug bonus beløbet\n                    stake = bookmaker.bonusAmount || 0;\n                    // Actual cost skal være lig med freebet beløbet\n                    actualCost = bookmaker.bonusAmount || 0;\n                }\n            }\n        }\n\n        // Marker odds under minimum ved at sætte dem til 0\n        const validTeam1 = odds.team1 >= bookmaker.minOdds ? odds.team1 : 0;\n        const validDraw = odds.draw >= bookmaker.minOdds ? odds.draw : 0;\n        const validTeam2 = odds.team2 >= bookmaker.minOdds ? odds.team2 : 0;\n\n        return {\n            name: bookmaker.name,\n            fixedStake: stake,  // Brug den beregnede stake\n            actualCost: actualCost,  // Brug den beregnede actual cost\n            minOdds: bookmaker.minOdds,\n            preferLoss: bookmaker.preferLoss,\n            avoidWin: bookmaker.avoidWin,\n            isActive: bookmaker.isActive,\n            team1: validTeam1,\n            draw: validDraw,\n            team2: validTeam2,\n            originalOdds: {\n                team1: odds.team1,\n                draw: odds.draw,\n                team2: odds.team2\n            }\n        };\n    }).filter(odds => {\n        // I Bet 2, tjek også at der er en gyldig stake og at siden blev brugt i Bet 1\n        const hasValidStake = !isBet2 || odds.fixedStake > 0;\n        const isUsedInBet2 = !isBet2 || customer.bookmakers.find(b => b.name === odds.name)?.usedInBet1;\n        // Tjek at mindst ét gyldigt odds er indtastet og at bookmakeren er aktiv\n        const hasValidOdds = odds.team1 > 0 || odds.draw > 0 || odds.team2 > 0;\n        return hasValidOdds && odds.isActive && hasValidStake && isUsedInBet2;\n    });\n}\n\n// CSV template generation\nexport function generateCsvTemplate(customers: Customer[]): string {\n    const bookmakers = customers.length === 0 ? BOOKMAKERS : customers[0].bookmakers;\n    const headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2'];\n    \n    const rows = bookmakers.map(bookmaker => [bookmaker.name, '', '', '']);\n    \n    const csvContent = '\\uFEFF' + [\n        headers.join(','),\n        ...rows.map(row => row.join(','))\n    ].join('\\r\\n');\n    \n    return csvContent;\n}\n\n// Parse CSV data\nexport function parseCsvData(csvContent: string, customer: Customer): number {\n    try {\n        const lines = csvContent.split('\\n').filter(line => line.trim());\n        const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n        \n        // Support both Danish and English column names\n        const bookmakerIndex = headers.findIndex(h => \n            h.includes('bookmaker') || h.includes('bookie') || h.includes('site')\n        );\n        const team1Index = headers.findIndex(h => \n            h.includes('team1') || h.includes('hold 1') || h.includes('home')\n        );\n        const drawIndex = headers.findIndex(h => \n            h.includes('draw') || h.includes('uafgjort') || h.includes('x')\n        );\n        const team2Index = headers.findIndex(h => \n            h.includes('team2') || h.includes('hold 2') || h.includes('away')\n        );\n\n        if (bookmakerIndex === -1 || team1Index === -1 || drawIndex === -1 || team2Index === -1) {\n            throw new Error('CSV skal indeholde kolonner med bookmaker navn og odds for alle tre udfald');\n        }\n\n        let uploadedCount = 0;\n\n        // Parse data rows\n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split(',').map(v => v.trim());\n            \n            if (values.length < Math.max(bookmakerIndex, team1Index, drawIndex, team2Index) + 1) {\n                continue; // Skip incomplete rows\n            }\n\n            const bookmakerName = values[bookmakerIndex];\n            const team1OddsStr = values[team1Index].replace(',', '.'); // Handle Danish decimal separator\n            const drawOddsStr = values[drawIndex].replace(',', '.');\n            const team2OddsStr = values[team2Index].replace(',', '.');\n            \n            const team1Odds = parseFloat(team1OddsStr);\n            const drawOdds = parseFloat(drawOddsStr);\n            const team2Odds = parseFloat(team2OddsStr);\n\n            // Skip if any odds are invalid\n            if (isNaN(team1Odds) || isNaN(drawOdds) || isNaN(team2Odds)) {\n                console.warn(`Skipping row ${i + 1}: Invalid odds for ${bookmakerName}`);\n                continue;\n            }\n\n            // Find matching bookmaker (case-insensitive)\n            const bookmakerIndex_inArray = customer.bookmakers.findIndex(bm => \n                bm.name.toLowerCase() === bookmakerName.toLowerCase()\n            );\n\n            if (bookmakerIndex_inArray !== -1) {\n                customer.bookmakers[bookmakerIndex_inArray].odds = {\n                    team1: team1Odds,\n                    draw: drawOdds,\n                    team2: team2Odds\n                };\n                customer.bookmakers[bookmakerIndex_inArray].isActive = true;\n                uploadedCount++;\n            } else {\n                console.warn(`Bookmaker not found: ${bookmakerName}`);\n            }\n        }\n\n        return uploadedCount;\n    } catch (error) {\n        console.error('Error parsing CSV:', error);\n        throw error;\n    }\n}\n\n// Save calculation function for React integration\nexport async function saveCalculation(calculationData: any, getToken: () => Promise<string>) {\n    try {\n        const token = await getToken();\n        const response = await fetch('/api/calculations/save', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify(calculationData),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to save calculation');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error saving calculation:', error);\n        throw error;\n    }\n}\n\n// Export the main calculator functions that will be used by React\nexport {\n    BOOKMAKERS,\n    customers,\n    currentCustomerId,\n    currentBetType,\n    lastCalculatedResult\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/components/calculator/Calculator.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { useAuth } from '@clerk/nextjs';\nimport { BOOKMAKERS, Customer, calculateArbitrage, gatherOddsData } from '../../lib/calculator';\n\nexport function Calculator() {\n  const { getToken } = useAuth();\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [currentCustomerId, setCurrentCustomerId] = useState<string | null>(null);\n  const [currentBetType, setCurrentBetType] = useState<'qualifying' | 'bonus'>('qualifying');\n  const [lastCalculatedResult, setLastCalculatedResult] = useState<any>(null);\n  const [showCustomerForm, setShowCustomerForm] = useState(false);\n  const [newCustomerName, setNewCustomerName] = useState('');\n  const [team1Name, setTeam1Name] = useState('');\n  const [team2Name, setTeam2Name] = useState('');\n\n  const getCurrentCustomer = (): Customer | null => {\n    return customers.find(c => c.id === currentCustomerId) || customers[0] || null;\n  };\n\n  const addCustomer = () => {\n    if (!newCustomerName.trim() || !team1Name.trim() || !team2Name.trim()) {\n      alert('Du skal udfylde alle felter for at fortsætte');\n      return;\n    }\n\n    const newId = `kunde${customers.length + 1}`;\n    const newCustomer: Customer = {\n      id: newId,\n      name: newCustomerName,\n      bookmakers: BOOKMAKERS.map(bm => ({...bm})),\n      teamNames: {\n        team1: team1Name,\n        team2: team2Name\n      },\n      betType: 'qualifying'\n    };\n    \n    setCustomers([...customers, newCustomer]);\n    setCurrentCustomerId(newId);\n    setCurrentBetType('qualifying');\n    setShowCustomerForm(false);\n    setNewCustomerName('');\n    setTeam1Name('');\n    setTeam2Name('');\n  };\n\n  const calculateArbitrageHandler = () => {\n    const customer = getCurrentCustomer();\n    if (!customer) {\n      alert('Vælg en kunde først');\n      return;\n    }\n\n    const oddsData = gatherOddsData(customer);\n    if (oddsData.length === 0) {\n      alert('Indtast odds for mindst én aktiv bookmaker');\n      return;\n    }\n\n    const result = calculateArbitrage(oddsData, customer);\n    setLastCalculatedResult(result);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-8\">Arbitrage Calculator</h1>\n        \n        {/* Customer Management */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n          {customers.length === 0 ? (\n            <div className=\"text-center py-4\">\n              <button \n                onClick={() => setShowCustomerForm(true)}\n                className=\"btn-primary\"\n              >\n                Start Ny Beregning\n              </button>\n              <p className=\"text-gray-600 mt-2\">Tryk på knappen ovenfor for at starte en ny beregning</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <select \n                    value={currentCustomerId || ''} \n                    onChange={(e) => setCurrentCustomerId(e.target.value)}\n                    className=\"input-field max-w-xs\"\n                  >\n                    {customers.map(customer => (\n                      <option key={customer.id} value={customer.id}>\n                        {customer.name}\n                      </option>\n                    ))}\n                  </select>\n                  <button \n                    onClick={() => setShowCustomerForm(true)}\n                    className=\"btn-secondary\"\n                  >\n                    Tilføj ny kunde\n                  </button>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Bet Type:</label>\n                  <select \n                    value={currentBetType} \n                    onChange={(e) => setCurrentBetType(e.target.value as 'qualifying' | 'bonus')}\n                    className=\"input-field\"\n                  >\n                    <option value=\"qualifying\">Bet 1 (Kvalificerende)</option>\n                    <option value=\"bonus\">Bet 2 (Bonus og Freebets)</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 1</label>\n                  <input \n                    type=\"text\" \n                    className=\"input-field\" \n                    placeholder=\"Indtast navn på hold 1\"\n                    value={getCurrentCustomer()?.teamNames?.team1 || ''}\n                    onChange={(e) => {\n                      const customer = getCurrentCustomer();\n                      if (customer && customer.teamNames) {\n                        customer.teamNames.team1 = e.target.value;\n                        setCustomers([...customers]);\n                      }\n                    }}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 2</label>\n                  <input \n                    type=\"text\" \n                    className=\"input-field\" \n                    placeholder=\"Indtast navn på hold 2\"\n                    value={getCurrentCustomer()?.teamNames?.team2 || ''}\n                    onChange={(e) => {\n                      const customer = getCurrentCustomer();\n                      if (customer && customer.teamNames) {\n                        customer.teamNames.team2 = e.target.value;\n                        setCustomers([...customers]);\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Customer Form Modal */}\n          {showCustomerForm && (\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center\">\n              <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n                <h2 className=\"text-xl font-bold mb-4\">Ny Beregning</h2>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Kundenavn</label>\n                    <input \n                      type=\"text\" \n                      className=\"input-field w-full\" \n                      placeholder=\"Indtast kundens navn\"\n                      value={newCustomerName}\n                      onChange={(e) => setNewCustomerName(e.target.value)}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 1</label>\n                      <input \n                        type=\"text\" \n                        className=\"input-field w-full\" \n                        placeholder=\"Indtast navn på hold 1\"\n                        value={team1Name}\n                        onChange={(e) => setTeam1Name(e.target.value)}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 2</label>\n                      <input \n                        type=\"text\" \n                        className=\"input-field w-full\" \n                        placeholder=\"Indtast navn på hold 2\"\n                        value={team2Name}\n                        onChange={(e) => setTeam2Name(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end gap-2 mt-4\">\n                    <button \n                      onClick={() => setShowCustomerForm(false)}\n                      className=\"btn-secondary\"\n                    >\n                      Annuller\n                    </button>\n                    <button \n                      onClick={addCustomer}\n                      className=\"btn-primary\"\n                    >\n                      Fortsæt til odds\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Bookmaker Odds */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Bookmaker Odds</h2>\n          <div className=\"space-y-4\">\n            {getCurrentCustomer() ? (\n              getCurrentCustomer()!.bookmakers.slice(0, 3).map((bookmaker, index) => (\n                <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-800\">{bookmaker.name}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Min. odds: {bookmaker.minOdds} | Indsats: {bookmaker.fixedStake} DKK\n                      </p>\n                    </div>\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"sr-only peer\" \n                        checked={bookmaker.isActive}\n                        onChange={(e) => {\n                          const customer = getCurrentCustomer();\n                          if (customer) {\n                            customer.bookmakers[index].isActive = e.target.checked;\n                            setCustomers([...customers]);\n                          }\n                        }}\n                      />\n                      <div className=\"w-9 h-5 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-blue-600\"></div>\n                    </label>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 1</label>\n                      <input \n                        type=\"number\" \n                        step=\"0.01\" \n                        className=\"input-field\" \n                        placeholder=\"1.50\"\n                        value={bookmaker.odds?.team1 || ''}\n                        onChange={(e) => {\n                          const customer = getCurrentCustomer();\n                          if (customer && customer.bookmakers[index].odds) {\n                            customer.bookmakers[index].odds!.team1 = parseFloat(e.target.value) || 0;\n                            setCustomers([...customers]);\n                          }\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Uafgjort</label>\n                      <input \n                        type=\"number\" \n                        step=\"0.01\" \n                        className=\"input-field\" \n                        placeholder=\"3.20\"\n                        value={bookmaker.odds?.draw || ''}\n                        onChange={(e) => {\n                          const customer = getCurrentCustomer();\n                          if (customer && customer.bookmakers[index].odds) {\n                            customer.bookmakers[index].odds!.draw = parseFloat(e.target.value) || 0;\n                            setCustomers([...customers]);\n                          }\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hold 2</label>\n                      <input \n                        type=\"number\" \n                        step=\"0.01\" \n                        className=\"input-field\" \n                        placeholder=\"2.80\"\n                        value={bookmaker.odds?.team2 || ''}\n                        onChange={(e) => {\n                          const customer = getCurrentCustomer();\n                          if (customer && customer.bookmakers[index].odds) {\n                            customer.bookmakers[index].odds!.team2 = parseFloat(e.target.value) || 0;\n                            setCustomers([...customers]);\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <p>Vælg eller opret en kunde for at indtaste odds</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Results */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-800\">Beregningsresultater</h2>\n            <button \n              onClick={calculateArbitrageHandler}\n              className=\"btn-primary\"\n              disabled={!getCurrentCustomer()}\n            >\n              Find Bedste Arbitrage Mulighed\n            </button>\n          </div>\n          \n          {lastCalculatedResult ? (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-gray-800 mb-3\">Sammenfatning</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Total Indsats:</span>\n                    <span className=\"font-semibold ml-2\">{lastCalculatedResult.totalStake.toFixed(2)} DKK</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Faktisk Omkostning:</span>\n                    <span className=\"font-semibold ml-2\">{lastCalculatedResult.totalActualCost.toFixed(2)} DKK</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Profit:</span>\n                    <span className={`font-semibold ml-2 ${lastCalculatedResult.profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {lastCalculatedResult.profit.toFixed(2)} DKK\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Profit %:</span>\n                    <span className={`font-semibold ml-2 ${lastCalculatedResult.profitPercentage > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {lastCalculatedResult.profitPercentage.toFixed(2)}%\n                    </span>\n                  </div>\n                </div>\n                <div className=\"mt-3\">\n                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${\n                    lastCalculatedResult.isArbitrage \n                      ? 'bg-green-100 text-green-800' \n                      : 'bg-red-100 text-red-800'\n                  }`}>\n                    {lastCalculatedResult.isArbitrage ? '✓ Arbitrage Mulighed' : '✗ Ingen Arbitrage'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>Klik på \"Find Bedste Arbitrage Mulighed\" for at se resultater</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1640, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}}]
}