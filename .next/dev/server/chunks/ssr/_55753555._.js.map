{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/lib/calculator.ts"],"sourcesContent":["// Calculator module for React integration\n\nexport interface BookmakerInfo {\n    name: string;\n    fixedStake: number;\n    hasBonus: boolean;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    bonusType?: 'freebet' | 'matchingBonus' | 'none';\n    bonusAmount?: number;\n    bonusMinOdds?: number;\n    qualifyingBetAmount?: number;\n    isBonusLocked?: boolean;\n    usedInBet1?: boolean;\n    bonusOnlyIfLost?: boolean;\n    bet1Lost?: boolean;\n    bet1Balance?: number;\n    bet1Profit?: number;\n    odds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface TeamNames {\n    team1: string;\n    team2: string;\n}\n\nexport interface BookmakerOdds {\n    name: string;\n    team1: number;\n    draw: number;\n    team2: number;\n    fixedStake: number;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    betType?: 'team1' | 'draw' | 'team2';\n    originalOdds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    favoritType?: 'team1' | 'team2';\n    underdogType?: 'team1' | 'team2';\n    returns?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface Customer {\n    id: string;\n    name: string;\n    bookmakers: BookmakerInfo[];\n    teamNames?: TeamNames;\n    betType: 'qualifying' | 'bonus';\n}\n\nexport interface ArbitrageResult {\n    allBookmakers: {\n        name: string;\n        team1Odds: number;\n        drawOdds: number;\n        team2Odds: number;\n        fixedStake: number;\n        actualCost: number;\n        minOdds: number;\n        betType: 'team1' | 'draw' | 'team2';\n        potentialReturn: number;\n    }[];\n    totalStake: number;\n    totalActualCost: number;\n    potentialReturns: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    profit: number;\n    profitPercentage: number;\n    isArbitrage: boolean;\n}\n\nconst BOOKMAKERS: BookmakerInfo[] = [\n    { name: 'Unibet', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.4, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.4, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet365', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.2, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.2, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'LeoVegas', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'ComeOn', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.8, preferLoss: true, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Mr Green', fixedStake: 300, hasBonus: false, actualCost: 300, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 300, bonusMinOdds: 1.8, qualifyingBetAmount: 300, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'NordicBet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bwin', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: '888sport', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 2.0, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 2.0, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet25', fixedStake: 250, hasBonus: false, actualCost: 250, minOdds: 1.95, isActive: true, bonusType: 'matchingBonus', bonusAmount: 250, bonusMinOdds: 1.95, qualifyingBetAmount: 250, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Expekt', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.5, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.5, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'Cashpoint', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Jackpotbet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.5, isActive: true, bonusType: 'matchingBonus', bonusAmount: 500, bonusMinOdds: 1.5, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Getlucky', fixedStake: 100, hasBonus: false, actualCost: 100, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 100, bonusMinOdds: 1.8, qualifyingBetAmount: 100, usedInBet1: true, bonusOnlyIfLost: false }\n];\n\n// Global state\nlet customers: Customer[] = [];\nlet currentCustomerId: string | null = null;\nlet currentBetType: 'qualifying' | 'bonus' = 'qualifying';\nlet lastCalculatedResult: ArbitrageResult | null = null;\n\nexport function getCurrentCustomer(): Customer {\n    return customers.find(c => c.id === currentCustomerId) || customers[0];\n}\n\nexport function generateBookmakerId(bookmakerName: string): string {\n    return bookmakerName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n}\n\n// Core arbitrage calculation function\nexport function calculateArbitrage(oddsData: BookmakerOdds[], customer: Customer): ArbitrageResult {\n    const isQualifyingBet = customer.betType === 'qualifying';\n\n    // Beregn potentielle returns for hver bookmaker for hvert udfald\n    const bookmakerReturns = oddsData.map(bm => {\n        const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n\n        // Opdater calculateReturn til at tjekke for freebet uafhængigt af betType\n        const calculateReturn = (odds: number, stake: number, isFreebet: boolean) => {\n            if (isFreebet) {\n                return (odds - 1) * stake; // Kun gevinst, ikke indsats tilbage for freebets\n            }\n            return odds * stake; // Normal beregning\n        };\n\n        // Find det laveste odds (favorit) for denne bookmaker\n        const team1Odds = bm.team1 || Infinity;\n        const team2Odds = bm.team2 || Infinity;\n        const favoritType = team1Odds <= team2Odds ? 'team1' as const : 'team2' as const;\n        const underdogType = team1Odds <= team2Odds ? 'team2' as const : 'team1' as const;\n\n        // Kald calculateReturn med isFreebet parameter\n        return {\n            ...bm,\n            favoritType,\n            underdogType,\n            returns: {\n                team1: calculateReturn(bm.team1, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                draw: calculateReturn(bm.draw, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                team2: calculateReturn(bm.team2, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet')\n            }\n        };\n    });\n\n    // Find target return (gennemsnit af alle mulige returns)\n    const totalPossibleReturn = bookmakerReturns.reduce((sum, bm) => \n        sum + (bm.returns?.team1 || 0) + (bm.returns?.draw || 0) + (bm.returns?.team2 || 0), 0);\n    const targetReturnPerOutcome = totalPossibleReturn / 3;\n\n    let bestDistribution = {\n        team1: [] as BookmakerOdds[],\n        draw: [] as BookmakerOdds[],\n        team2: [] as BookmakerOdds[],\n        deviation: Infinity\n    };\n\n    // Funktion til at evaluere en distribution\n    const evaluateDistribution = (team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]): number => {\n        const calculateReturnForBet = (bm: BookmakerOdds, odds: number) => {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n            if (!isQualifyingBet && bookmakerInfo?.bonusType === 'freebet') {\n                return (odds - 1) * bm.fixedStake;\n            }\n            return odds * bm.fixedStake;\n        };\n\n        const team1Return = team1.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team1), 0);\n        const drawReturn = draw.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.draw), 0);\n        const team2Return = team2.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team2), 0);\n\n        // Beregn afvigelse fra target\n        const maxReturn = Math.max(team1Return, drawReturn, team2Return);\n        const minReturn = Math.min(team1Return, drawReturn, team2Return);\n        const avgReturn = (team1Return + drawReturn + team2Return) / 3;\n\n        // Straf større afvigelser hårdere ved at kvadrere forskellen\n        const baseDeviation = Math.pow(maxReturn - minReturn, 2) + \n                            Math.pow(Math.abs(team1Return - avgReturn), 2) +\n                            Math.pow(Math.abs(drawReturn - avgReturn), 2) +\n                            Math.pow(Math.abs(team2Return - avgReturn), 2);\n\n        let penalty = 0;\n\n        // Specialregler for kvalificerende bets\n        if (isQualifyingBet) {\n            // Tæl \"kun hvis tab\"-freebets på hvert udfald\n            const bonusOnlyIfLostFreebets = [...team1, ...draw, ...team2].filter(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                return bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet';\n            });\n            \n            const team1BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team1').length;\n            const drawBonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'draw').length;\n            const team2BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team2').length;\n            \n            // Straf hvis \"kun hvis tab\"-freebets ikke er balanceret fordelt\n            const totalBonusOnlyIfLost = team1BonusOnlyIfLost + drawBonusOnlyIfLost + team2BonusOnlyIfLost;\n            if (totalBonusOnlyIfLost > 0) {\n                const idealPerOutcome = totalBonusOnlyIfLost / 3;\n                const deviation = Math.abs(team1BonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(drawBonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(team2BonusOnlyIfLost - idealPerOutcome);\n                penalty += deviation * 10000; // Stor straf for ubalanceret fordeling\n            }\n\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // Straf hvis vi bruger en bookmaker uden bonus i kvalificerende fase\n                if (!bookmakerInfo?.bonusType || bookmakerInfo.bonusType === 'none') {\n                    penalty += 5000;\n                }\n\n                // Tjek om odds er over minimum for bonus\n                if (bookmakerInfo?.bonusMinOdds) {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    if (placedOdds < bookmakerInfo.bonusMinOdds) {\n                        penalty += 10000; // Stor straf hvis odds er under minimum for bonus\n                    }\n                }\n\n                // Specialregel for \"kun hvis tabt\" bonusser - vi vil gerne tabe på disse bookmakere\n                if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                    // Find den højeste odds (underdog) for denne bookmaker\n                    const team1Odds = bm.team1 || 0;\n                    const team2Odds = bm.team2 || 0;\n                    const underdogType = team1Odds >= team2Odds ? 'team1' : 'team2';\n                    \n                    // Hvis vi spiller på underdog'en (laveste sandsynlighed for gevinst), giv bonus\n                    if (bm.betType === underdogType) {\n                        penalty -= 2000; // Bonus for at spille på underdog'en\n                    } else {\n                        penalty += 5000; // Straf for at spille på favoritten\n                    }\n                }\n            });\n        }\n\n        // Specialregler for bonus bets (freebets)\n        if (!isQualifyingBet) {\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // For freebets vil vi gerne have højere odds for at maksimere gevinst\n                // men stadig holde det balanceret\n                if (bookmakerInfo?.bonusType === 'freebet') {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    // Mindre aggressiv bonus for højere odds\n                    penalty -= (placedOdds - bookmakerInfo.minOdds) * 100;\n                }\n\n                // Straf for meget ubalancerede returns i Bet 2\n                const returnSpread = maxReturn - minReturn;\n                if (returnSpread > avgReturn * 0.1) { // Hvis spredningen er mere end 10% af gennemsnittet\n                    penalty += Math.pow(returnSpread, 2);\n                }\n            });\n        }\n\n        // Generelle regler for alle typer bets\n        const comeOnBet = [...team1, ...draw, ...team2].find(bm => bm.name === 'ComeOn');\n        if (comeOnBet) {\n            const comeOnData = bookmakerReturns.find(bm => bm.name === 'ComeOn');\n            if (comeOnData) {\n                const isOnFavorit = comeOnBet.betType === comeOnData.favoritType;\n                const isOnDraw = comeOnBet.betType === 'draw';\n                if (isOnFavorit || isOnDraw) {\n                    penalty += 50000;\n                }\n            }\n        }\n\n        return baseDeviation + penalty;\n    };\n\n    // Prøv forskellige kombinationer\n    const tryDistribution = (remaining: typeof bookmakerReturns, team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]) => {\n        if (remaining.length === 0) {\n            const deviation = evaluateDistribution(team1, draw, team2);\n            if (deviation < bestDistribution.deviation) {\n                bestDistribution = { team1, draw, team2, deviation };\n            }\n            return;\n        }\n\n        const [current, ...rest] = remaining;\n        \n        // Beregn nuværende returns for hver gruppe\n        const currentTeam1 = team1.reduce((sum, bm) => sum + bm.team1 * bm.fixedStake, 0);\n        const currentDraw = draw.reduce((sum, bm) => sum + bm.draw * bm.fixedStake, 0);\n        const currentTeam2 = team2.reduce((sum, bm) => sum + bm.team2 * bm.fixedStake, 0);\n\n        // Specialhåndtering for ComeOn - skal altid på det modsatte hold af favoritten\n        if (current.name === 'ComeOn') {\n            const team1Odds = current.team1 || Infinity;\n            const team2Odds = current.team2 || Infinity;\n            \n            // Find ud af hvilket hold der er favoritten (laveste odds)\n            const favoritType = team1Odds <= team2Odds ? 'team1' : 'team2';\n            \n            // Placer ComeOn på det modsatte hold af favoritten\n            if (favoritType === 'team1' && current.team2 > 0) {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            } else if (favoritType === 'team2' && current.team1 > 0) {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            }\n            return;\n        }\n\n        // Prioriter placering baseret på bookmaker præferencer\n        let priorities: Array<{ type: 'team1' | 'draw' | 'team2'; need: number; odds: number; current: BookmakerOdds[] }> = [];\n        \n        // Specialhåndtering for \"kun hvis tab\"-freebets i kvalificerende bets\n        if (isQualifyingBet) {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === current.name);\n            if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                // Tæl hvor mange \"kun hvis tab\"-freebets der allerede er på hvert udfald\n                const existingBonusOnlyIfLost = [...team1, ...draw, ...team2].filter(bm => {\n                    const bmInfo = customer.bookmakers.find(b => b.name === bm.name);\n                    return bmInfo?.bonusOnlyIfLost && bmInfo.bonusType === 'freebet';\n                });\n                \n                const team1Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team1').length;\n                const drawCount = existingBonusOnlyIfLost.filter(bm => bm.betType === 'draw').length;\n                const team2Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team2').length;\n                \n                // Prioriter det udfald der har færrest \"kun hvis tab\"-freebets\n                priorities = [\n                    { type: 'team1' as const, need: -team1Count, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -drawCount, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -team2Count, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need); // Laveste count først\n            }\n        }\n        \n        // Hvis der ikke er sat nogen prioriteter endnu, brug standard logik\n        if (priorities.length === 0) {\n            if (current.preferLoss) {\n                // For bookmakere der foretrækker tab, placer dem hvor der er lavest return\n                priorities = [\n                    { type: 'team1' as const, need: -currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need);\n            } else {\n                // For normale bookmakere, placer dem hvor der er størst behov\n                priorities = [\n                    { type: 'team1' as const, need: targetReturnPerOutcome - currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: targetReturnPerOutcome - currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: targetReturnPerOutcome - currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => b.need - a.need);\n            }\n        }\n\n        // Hvis der ikke er nogen gyldige muligheder, spring denne bookmaker over\n        if (priorities.length === 0) return;\n\n        // Prøv fordelingerne i prioriteret rækkefølge\n        for (const group of priorities) {\n            if (group.type === 'team1') {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            } else if (group.type === 'draw') {\n                tryDistribution(rest, team1, [...draw, current], team2);\n            } else {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            }\n        }\n    };\n\n    tryDistribution(bookmakerReturns, [], [], []);\n\n    // Konverter den bedste fordeling til det forventede format\n    const allBookmakers = oddsData.map(bm => {\n        let betType: 'team1' | 'draw' | 'team2';\n        let potentialReturn: number;\n\n        if (bestDistribution.team1.find(b => b.name === bm.name)) {\n            betType = 'team1';\n            potentialReturn = bm.team1 * bm.fixedStake;\n        } else if (bestDistribution.draw.find(b => b.name === bm.name)) {\n            betType = 'draw';\n            potentialReturn = bm.draw * bm.fixedStake;\n        } else {\n            betType = 'team2';\n            potentialReturn = bm.team2 * bm.fixedStake;\n        }\n\n        return {\n            name: bm.name,\n            team1Odds: bm.team1,\n            drawOdds: bm.draw,\n            team2Odds: bm.team2,\n            fixedStake: bm.fixedStake,\n            actualCost: bm.actualCost,\n            minOdds: bm.minOdds,\n            preferLoss: bm.preferLoss,\n            avoidWin: bm.avoidWin,\n            betType,\n            potentialReturn\n        };\n    });\n\n    const totalStake = allBookmakers.reduce((sum, bm) => sum + bm.fixedStake, 0);\n    const totalActualCost = allBookmakers.reduce((sum, bm) => sum + bm.actualCost, 0);\n\n    const potentialReturns = {\n        team1: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team1' ? bm.potentialReturn : 0), 0),\n        draw: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'draw' ? bm.potentialReturn : 0), 0),\n        team2: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team2' ? bm.potentialReturn : 0), 0)\n    };\n\n    const minReturn = Math.min(\n        potentialReturns.team1,\n        potentialReturns.draw,\n        potentialReturns.team2\n    );\n\n    const profit = minReturn - totalActualCost;\n    const profitPercentage = (profit / totalActualCost) * 100;\n    const isArbitrage = profit > 0;\n\n    return {\n        allBookmakers,\n        totalStake,\n        totalActualCost,\n        potentialReturns,\n        profit,\n        profitPercentage,\n        isArbitrage\n    };\n}\n\n// Utility function to gather odds data from customer bookmakers\nexport function gatherOddsData(customer: Customer): BookmakerOdds[] {\n    const isBet2 = customer.betType === 'bonus';\n\n    return customer.bookmakers.map(bookmaker => {\n        const odds = bookmaker.odds || { team1: 0, draw: 0, team2: 0 };\n\n        // Bestem stake og actual cost baseret på bet type og bonus type\n        let stake = bookmaker.fixedStake;\n        let actualCost = bookmaker.actualCost;\n\n        if (isBet2) {\n            if (!bookmaker.usedInBet1) {\n                // Hvis siden ikke blev brugt i Bet 1, skal den ikke inkluderes\n                stake = 0;\n                actualCost = 0;\n            } else if (bookmaker.bonusType === 'matchingBonus') {\n                // For matching bonus, brug den indtastede saldo\n                stake = bookmaker.bet1Balance || 0;\n                // Actual cost skal være lig med den oprindelige indbetaling, uanset saldo\n                actualCost = bookmaker.qualifyingBetAmount || 0;\n            } else if (bookmaker.bonusType === 'freebet') {\n                // For freebets, tjek om bonus er tilgængelig\n                if (bookmaker.bonusOnlyIfLost && bookmaker.bet1Lost === false) {\n                    // Hvis bonus kun gives ved tab, men vi vandt, så ingen bonus\n                    stake = 0;\n                    actualCost = 0;\n                } else {\n                    // For freebets, brug bonus beløbet\n                    stake = bookmaker.bonusAmount || 0;\n                    // Actual cost skal være lig med freebet beløbet\n                    actualCost = bookmaker.bonusAmount || 0;\n                }\n            }\n        }\n\n        // Marker odds under minimum ved at sætte dem til 0\n        const validTeam1 = odds.team1 >= bookmaker.minOdds ? odds.team1 : 0;\n        const validDraw = odds.draw >= bookmaker.minOdds ? odds.draw : 0;\n        const validTeam2 = odds.team2 >= bookmaker.minOdds ? odds.team2 : 0;\n\n        return {\n            name: bookmaker.name,\n            fixedStake: stake,  // Brug den beregnede stake\n            actualCost: actualCost,  // Brug den beregnede actual cost\n            minOdds: bookmaker.minOdds,\n            preferLoss: bookmaker.preferLoss,\n            avoidWin: bookmaker.avoidWin,\n            isActive: bookmaker.isActive,\n            team1: validTeam1,\n            draw: validDraw,\n            team2: validTeam2,\n            originalOdds: {\n                team1: odds.team1,\n                draw: odds.draw,\n                team2: odds.team2\n            }\n        };\n    }).filter(odds => {\n        // I Bet 2, tjek også at der er en gyldig stake og at siden blev brugt i Bet 1\n        const hasValidStake = !isBet2 || odds.fixedStake > 0;\n        const isUsedInBet2 = !isBet2 || customer.bookmakers.find(b => b.name === odds.name)?.usedInBet1;\n        // Tjek at mindst ét gyldigt odds er indtastet og at bookmakeren er aktiv\n        const hasValidOdds = odds.team1 > 0 || odds.draw > 0 || odds.team2 > 0;\n        return hasValidOdds && odds.isActive && hasValidStake && isUsedInBet2;\n    });\n}\n\n// CSV template generation\nexport function generateCsvTemplate(customers: Customer[]): string {\n    const bookmakers = customers.length === 0 ? BOOKMAKERS : customers[0].bookmakers;\n    const headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2'];\n    \n    const rows = bookmakers.map(bookmaker => [bookmaker.name, '', '', '']);\n    \n    const csvContent = '\\uFEFF' + [\n        headers.join(','),\n        ...rows.map(row => row.join(','))\n    ].join('\\r\\n');\n    \n    return csvContent;\n}\n\n// Parse CSV data\nexport function parseCsvData(csvContent: string, customer: Customer): number {\n    try {\n        const lines = csvContent.split('\\n').filter(line => line.trim());\n        const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n        \n        // Support both Danish and English column names\n        const bookmakerIndex = headers.findIndex(h => \n            h.includes('bookmaker') || h.includes('bookie') || h.includes('site')\n        );\n        const team1Index = headers.findIndex(h => \n            h.includes('team1') || h.includes('hold 1') || h.includes('home')\n        );\n        const drawIndex = headers.findIndex(h => \n            h.includes('draw') || h.includes('uafgjort') || h.includes('x')\n        );\n        const team2Index = headers.findIndex(h => \n            h.includes('team2') || h.includes('hold 2') || h.includes('away')\n        );\n\n        if (bookmakerIndex === -1 || team1Index === -1 || drawIndex === -1 || team2Index === -1) {\n            throw new Error('CSV skal indeholde kolonner med bookmaker navn og odds for alle tre udfald');\n        }\n\n        let uploadedCount = 0;\n\n        // Parse data rows\n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split(',').map(v => v.trim());\n            \n            if (values.length < Math.max(bookmakerIndex, team1Index, drawIndex, team2Index) + 1) {\n                continue; // Skip incomplete rows\n            }\n\n            const bookmakerName = values[bookmakerIndex];\n            const team1OddsStr = values[team1Index].replace(',', '.'); // Handle Danish decimal separator\n            const drawOddsStr = values[drawIndex].replace(',', '.');\n            const team2OddsStr = values[team2Index].replace(',', '.');\n            \n            const team1Odds = parseFloat(team1OddsStr);\n            const drawOdds = parseFloat(drawOddsStr);\n            const team2Odds = parseFloat(team2OddsStr);\n\n            // Skip if any odds are invalid\n            if (isNaN(team1Odds) || isNaN(drawOdds) || isNaN(team2Odds)) {\n                console.warn(`Skipping row ${i + 1}: Invalid odds for ${bookmakerName}`);\n                continue;\n            }\n\n            // Find matching bookmaker (case-insensitive)\n            const bookmakerIndex_inArray = customer.bookmakers.findIndex(bm => \n                bm.name.toLowerCase() === bookmakerName.toLowerCase()\n            );\n\n            if (bookmakerIndex_inArray !== -1) {\n                customer.bookmakers[bookmakerIndex_inArray].odds = {\n                    team1: team1Odds,\n                    draw: drawOdds,\n                    team2: team2Odds\n                };\n                customer.bookmakers[bookmakerIndex_inArray].isActive = true;\n                uploadedCount++;\n            } else {\n                console.warn(`Bookmaker not found: ${bookmakerName}`);\n            }\n        }\n\n        return uploadedCount;\n    } catch (error) {\n        console.error('Error parsing CSV:', error);\n        throw error;\n    }\n}\n\n// Save calculation function for React integration\nexport async function saveCalculation(calculationData: any, getToken: () => Promise<string>) {\n    try {\n        const token = await getToken();\n        const response = await fetch('/api/calculations/save', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify(calculationData),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to save calculation');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error saving calculation:', error);\n        throw error;\n    }\n}\n\n// Export the main calculator functions that will be used by React\nexport {\n    BOOKMAKERS,\n    customers,\n    currentCustomerId,\n    currentBetType,\n    lastCalculatedResult\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/lib/csv-utils.ts"],"sourcesContent":["// Enhanced CSV utilities for Better Bets\nimport { Customer, BOOKMAKERS, BookmakerInfo } from './calculator';\n\nexport interface CsvExportOptions {\n  includeHeaders?: boolean;\n  includeEmptyRows?: boolean;\n  format?: 'template' | 'data' | 'results';\n  delimiter?: ',' | ';' | '\\t';\n}\n\nexport interface CsvImportResult {\n  success: boolean;\n  importedCount: number;\n  errors: string[];\n  warnings: string[];\n}\n\n// Enhanced CSV template generation with more options\nexport function generateCsvTemplate(\n  customers: Customer[], \n  options: CsvExportOptions = {}\n): string {\n  const {\n    includeHeaders = true,\n    includeEmptyRows = true,\n    format = 'template',\n    delimiter = ','\n  } = options;\n\n  const bookmakers = customers.length === 0 ? BOOKMAKERS : customers[0].bookmakers;\n  \n  let headers: string[];\n  let rows: string[][];\n\n  switch (format) {\n    case 'template':\n      headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2', 'Min. Odds', 'Indsats'];\n      rows = bookmakers.map(bookmaker => [\n        bookmaker.name,\n        '',\n        '',\n        '',\n        bookmaker.minOdds.toString(),\n        bookmaker.fixedStake.toString()\n      ]);\n      break;\n    \n    case 'data':\n      headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2', 'Aktiv'];\n      rows = bookmakers.map(bookmaker => [\n        bookmaker.name,\n        bookmaker.odds?.team1?.toString() || '',\n        bookmaker.odds?.draw?.toString() || '',\n        bookmaker.odds?.team2?.toString() || '',\n        bookmaker.isActive ? 'Ja' : 'Nej'\n      ]);\n      break;\n    \n    case 'results':\n      headers = ['Bookmaker', 'Bet Type', 'Indsats', 'Odds', 'Potentiel Gevinst'];\n      rows = bookmakers\n        .filter(bm => bm.isActive && bm.odds)\n        .map(bookmaker => [\n          bookmaker.name,\n          'Hold 1',\n          bookmaker.fixedStake.toString(),\n          bookmaker.odds!.team1.toString(),\n          (bookmaker.fixedStake * bookmaker.odds!.team1).toFixed(2)\n        ]);\n      break;\n    \n    default:\n      headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2'];\n      rows = bookmakers.map(bookmaker => [bookmaker.name, '', '', '']);\n  }\n\n  if (!includeEmptyRows && format === 'template') {\n    rows = rows.filter(row => row.some(cell => cell.trim() !== ''));\n  }\n\n  const csvContent = '\\uFEFF' + [\n    ...(includeHeaders ? [headers.join(delimiter)] : []),\n    ...rows.map((row: string[]) => row.join(delimiter))\n  ].join('\\r\\n');\n\n  return csvContent;\n}\n\n// Enhanced CSV parsing with better error handling\nexport function parseCsvData(\n  csvContent: string, \n  customer: Customer,\n  options: { delimiter?: string; skipEmptyRows?: boolean } = {}\n): CsvImportResult {\n  const { delimiter = ',', skipEmptyRows = true } = options;\n  \n  const result: CsvImportResult = {\n    success: false,\n    importedCount: 0,\n    errors: [],\n    warnings: []\n  };\n\n  try {\n    // Remove BOM if present\n    const cleanContent = csvContent.replace(/^\\uFEFF/, '');\n    const lines = cleanContent.split(/\\r?\\n/).filter(line => \n      skipEmptyRows ? line.trim() : true\n    );\n\n    if (lines.length < 2) {\n      result.errors.push('CSV filen skal indeholde mindst en header og en datarække');\n      return result;\n    }\n\n    const headers = lines[0].split(delimiter).map(h => h.trim().toLowerCase());\n    \n    // Support multiple column name variations\n    const bookmakerIndex = headers.findIndex(h => \n      h.includes('bookmaker') || h.includes('bookie') || h.includes('site') || h.includes('udbyder')\n    );\n    const team1Index = headers.findIndex(h => \n      h.includes('team1') || h.includes('hold 1') || h.includes('home') || h.includes('hjemme')\n    );\n    const drawIndex = headers.findIndex(h => \n      h.includes('draw') || h.includes('uafgjort') || h.includes('x') || h.includes('uafgjort')\n    );\n    const team2Index = headers.findIndex(h => \n      h.includes('team2') || h.includes('hold 2') || h.includes('away') || h.includes('ude')\n    );\n\n    if (bookmakerIndex === -1) {\n      result.errors.push('CSV skal indeholde en kolonne med bookmaker navne');\n      return result;\n    }\n\n    if (team1Index === -1 || drawIndex === -1 || team2Index === -1) {\n      result.errors.push('CSV skal indeholde kolonner med odds for alle tre udfald (Hold 1, Uafgjort, Hold 2)');\n      return result;\n    }\n\n    // Parse data rows\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n\n      const values = line.split(delimiter).map(v => v.trim().replace(/\"/g, ''));\n      \n      if (values.length < Math.max(bookmakerIndex, team1Index, drawIndex, team2Index) + 1) {\n        result.warnings.push(`Række ${i + 1}: Ufuldstændig data, springer over`);\n        continue;\n      }\n\n      const bookmakerName = values[bookmakerIndex];\n      if (!bookmakerName) {\n        result.warnings.push(`Række ${i + 1}: Ingen bookmaker navn, springer over`);\n        continue;\n      }\n\n      // Parse odds with better number handling\n      const parseOdds = (oddsStr: string): number | null => {\n        const cleaned = oddsStr.replace(/[^\\d.,]/g, '').replace(',', '.');\n        const parsed = parseFloat(cleaned);\n        return isNaN(parsed) || parsed <= 0 ? null : parsed;\n      };\n\n      const team1Odds = parseOdds(values[team1Index] || '');\n      const drawOdds = parseOdds(values[drawIndex] || '');\n      const team2Odds = parseOdds(values[team2Index] || '');\n\n      if (!team1Odds || !drawOdds || !team2Odds) {\n        result.warnings.push(`Række ${i + 1}: Ugyldige odds for ${bookmakerName}`);\n        continue;\n      }\n\n      // Find matching bookmaker (case-insensitive)\n      const bookmakerIndex_inArray = customer.bookmakers.findIndex(bm => \n        bm.name.toLowerCase() === bookmakerName.toLowerCase()\n      );\n\n      if (bookmakerIndex_inArray !== -1) {\n        const bookmaker = customer.bookmakers[bookmakerIndex_inArray];\n        \n        // Validate minimum odds\n        if (team1Odds < bookmaker.minOdds || drawOdds < bookmaker.minOdds || team2Odds < bookmaker.minOdds) {\n          result.warnings.push(`${bookmakerName}: Odds under minimum (${bookmaker.minOdds})`);\n        }\n\n        bookmaker.odds = {\n          team1: team1Odds,\n          draw: drawOdds,\n          team2: team2Odds\n        };\n        bookmaker.isActive = true;\n        result.importedCount++;\n      } else {\n        result.warnings.push(`Bookmaker ikke fundet: ${bookmakerName}`);\n      }\n    }\n\n    result.success = result.importedCount > 0;\n    if (result.importedCount === 0) {\n      result.errors.push('Ingen gyldige odds blev importeret');\n    }\n\n  } catch (error) {\n    result.errors.push(`Fejl ved parsing af CSV: ${error instanceof Error ? error.message : 'Ukendt fejl'}`);\n  }\n\n  return result;\n}\n\n// Export current calculation results to CSV\nexport function exportCalculationResults(\n  calculationResult: any,\n  customer: Customer,\n  options: CsvExportOptions = {}\n): string {\n  const {\n    includeHeaders = true,\n    delimiter = ','\n  } = options;\n\n  const headers = [\n    'Bookmaker',\n    'Bet Type', \n    'Odds',\n    'Indsats (DKK)',\n    'Faktisk Omkostning (DKK)',\n    'Potentiel Gevinst (DKK)',\n    'Profit (DKK)'\n  ];\n\n  const rows = calculationResult.allBookmakers.map((bm: any) => {\n    const betType = bm.betType === 'team1' ? 'Hold 1' :\n                   bm.betType === 'draw' ? 'Uafgjort' : 'Hold 2';\n    const odds = bm.betType === 'team1' ? bm.team1Odds :\n                 bm.betType === 'draw' ? bm.drawOdds : bm.team2Odds;\n    const potentialWin = bm.fixedStake * odds;\n    const profit = potentialWin - bm.actualCost;\n\n    return [\n      bm.name,\n      betType,\n      odds.toFixed(2),\n      bm.fixedStake.toFixed(2),\n      bm.actualCost.toFixed(2),\n      potentialWin.toFixed(2),\n      profit.toFixed(2)\n    ];\n  });\n\n  // Add summary row\n  rows.push([\n    'TOTAL',\n    '',\n    '',\n    calculationResult.totalStake.toFixed(2),\n    calculationResult.totalActualCost.toFixed(2),\n    '',\n    calculationResult.profit.toFixed(2)\n  ]);\n\n  const csvContent = '\\uFEFF' + [\n    ...(includeHeaders ? [headers.join(delimiter)] : []),\n    ...rows.map((row: string[]) => row.join(delimiter))\n  ].join('\\r\\n');\n\n  return csvContent;\n}\n\n// Download CSV file\nexport function downloadCsvFile(content: string, filename: string): void {\n  const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n}\n\n// Validate CSV file before upload\nexport function validateCsvFile(file: File): { valid: boolean; error?: string } {\n  if (!file.name.toLowerCase().endsWith('.csv')) {\n    return { valid: false, error: 'Filen skal være en CSV fil' };\n  }\n\n  if (file.size > 5 * 1024 * 1024) { // 5MB limit\n    return { valid: false, error: 'Filen er for stor (max 5MB)' };\n  }\n\n  if (file.size === 0) {\n    return { valid: false, error: 'Filen er tom' };\n  }\n\n  return { valid: true };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/components/history/EnhancedCalculationHistory.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '@clerk/nextjs';\nimport { Calculation } from '../../lib/mongodb';\nimport { exportCalculationResults, downloadCsvFile } from '../../lib/csv-utils';\n\ninterface EnhancedCalculationHistoryProps {\n  className?: string;\n}\n\nexport function EnhancedCalculationHistory({ className = '' }: EnhancedCalculationHistoryProps) {\n  const { getToken } = useAuth();\n  const [calculations, setCalculations] = useState<Calculation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState<'date' | 'profit' | 'stake'>('date');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [filterBy, setFilterBy] = useState<'all' | 'profitable' | 'loss'>('all');\n  const [selectedCalculations, setSelectedCalculations] = useState<string[]>([]);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n\n  useEffect(() => {\n    fetchCalculations();\n  }, []);\n\n  const fetchCalculations = async () => {\n    try {\n      setLoading(true);\n      const token = await getToken();\n      if (!token) throw new Error('No authentication token');\n\n      const response = await fetch('/api/calculations/list', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch calculations');\n      }\n\n      const data = await response.json();\n      setCalculations(data.calculations || []);\n    } catch (err) {\n      console.error('Error fetching calculations:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch calculations');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteCalculation = async (id: string) => {\n    if (!id) return;\n    \n    try {\n      const token = await getToken();\n      if (!token) throw new Error('No authentication token');\n\n      const response = await fetch(`/api/calculations/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete calculation');\n      }\n\n      setCalculations(prev => prev.filter(calc => calc._id !== id));\n    } catch (err) {\n      console.error('Error deleting calculation:', err);\n      setError(err instanceof Error ? err.message : 'Failed to delete calculation');\n    }\n  };\n\n  const deleteSelectedCalculations = async () => {\n    try {\n      const token = await getToken();\n      if (!token) throw new Error('No authentication token');\n\n      const deletePromises = selectedCalculations\n        .filter(id => id) // Filter out undefined IDs\n        .map(id => \n          fetch(`/api/calculations/${id}`, {\n            method: 'DELETE',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          })\n        );\n\n      await Promise.all(deletePromises);\n      setCalculations(prev => prev.filter(calc => calc._id && !selectedCalculations.includes(calc._id)));\n      setSelectedCalculations([]);\n      setShowBulkActions(false);\n    } catch (err) {\n      console.error('Error deleting calculations:', err);\n      setError(err instanceof Error ? err.message : 'Failed to delete calculations');\n    }\n  };\n\n  const exportSelectedCalculations = () => {\n    const selectedCalcs = calculations.filter(calc => calc._id && selectedCalculations.includes(calc._id));\n    if (selectedCalcs.length === 0) return;\n\n    // Create a combined CSV export\n    const csvContent = selectedCalcs.map(calc => {\n      const result = calc.results;\n      return exportCalculationResults(result, {\n        id: calc._id || '',\n        name: calc.customerName,\n        teamNames: calc.teamNames,\n        bookmakers: calc.bookmakers.map(bm => ({\n          ...bm,\n          hasBonus: bm.bonusType !== 'none'\n        })),\n        betType: calc.betType\n      }, {\n        includeHeaders: false,\n        delimiter: ','\n      });\n    }).join('\\n');\n\n    const headers = 'Bookmaker,Bet Type,Odds,Indsats (DKK),Faktisk Omkostning (DKK),Potentiel Gevinst (DKK),Profit (DKK)\\n';\n    const fullCsvContent = headers + csvContent;\n\n    downloadCsvFile(fullCsvContent, `calculations_export_${new Date().toISOString().split('T')[0]}.csv`);\n  };\n\n  const filteredAndSortedCalculations = useMemo(() => {\n    let filtered = calculations.filter(calc => calc != null);\n\n    // Filter by search term\n    if (searchTerm) {\n      filtered = filtered.filter(calc =>\n        calc.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        `${calc.teamNames.team1} vs ${calc.teamNames.team2}`.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Filter by profitability\n    if (filterBy === 'profitable') {\n      filtered = filtered.filter(calc => calc.results.profit > 0);\n    } else if (filterBy === 'loss') {\n      filtered = filtered.filter(calc => calc.results.profit <= 0);\n    }\n\n    // Sort\n    filtered.sort((a, b) => {\n      let aValue: number | string;\n      let bValue: number | string;\n\n      switch (sortBy) {\n        case 'date':\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n          break;\n        case 'profit':\n          aValue = a.results.profit;\n          bValue = b.results.profit;\n          break;\n        case 'stake':\n          aValue = a.results.totalStake;\n          bValue = b.results.totalStake;\n          break;\n        default:\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n      }\n\n      if (sortOrder === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n\n    return filtered;\n  }, [calculations, searchTerm, sortBy, sortOrder, filterBy]);\n\n  const handleSelectAll = () => {\n    if (selectedCalculations.length === filteredAndSortedCalculations.length) {\n      setSelectedCalculations([]);\n    } else {\n      setSelectedCalculations(filteredAndSortedCalculations.map(calc => calc._id).filter((id): id is string => !!id));\n    }\n  };\n\n  const handleSelectCalculation = (id: string | undefined) => {\n    if (!id) return;\n    \n    setSelectedCalculations(prev =>\n      prev.includes(id)\n        ? prev.filter(calcId => calcId !== id)\n        : [...prev, id]\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-xl shadow-sm p-6 ${className}`}>\n        <div className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`bg-white rounded-xl shadow-sm p-6 ${className}`}>\n        <div className=\"text-center py-8\">\n          <div className=\"text-red-600 mb-4\">\n            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n            </svg>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error Loading History</h3>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={fetchCalculations}\n            className=\"btn-primary\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-xl shadow-sm p-6 ${className}`}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-bold text-gray-800\">Calculation History</h2>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">\n            {filteredAndSortedCalculations.length} calculations\n          </span>\n          {selectedCalculations.length > 0 && (\n            <span className=\"text-sm text-blue-600\">\n              {selectedCalculations.length} selected\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"mb-6 space-y-4\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by customer name or event...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"input-field\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <select\n              value={filterBy}\n              onChange={(e) => setFilterBy(e.target.value as any)}\n              className=\"input-field\"\n            >\n              <option value=\"all\">All Calculations</option>\n              <option value=\"profitable\">Profitable Only</option>\n              <option value=\"loss\">Loss Only</option>\n            </select>\n            <select\n              value={`${sortBy}-${sortOrder}`}\n              onChange={(e) => {\n                const [sort, order] = e.target.value.split('-');\n                setSortBy(sort as any);\n                setSortOrder(order as any);\n              }}\n              className=\"input-field\"\n            >\n              <option value=\"date-desc\">Newest First</option>\n              <option value=\"date-asc\">Oldest First</option>\n              <option value=\"profit-desc\">Highest Profit</option>\n              <option value=\"profit-asc\">Lowest Profit</option>\n              <option value=\"stake-desc\">Highest Stake</option>\n              <option value=\"stake-asc\">Lowest Stake</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedCalculations.length > 0 && (\n          <div className=\"flex items-center gap-2 p-3 bg-blue-50 rounded-lg\">\n            <span className=\"text-sm text-blue-800\">\n              {selectedCalculations.length} calculation(s) selected\n            </span>\n            <button\n              onClick={exportSelectedCalculations}\n              className=\"btn-secondary text-sm\"\n            >\n              Export Selected\n            </button>\n            <button\n              onClick={deleteSelectedCalculations}\n              className=\"btn-danger text-sm\"\n            >\n              Delete Selected\n            </button>\n            <button\n              onClick={() => setSelectedCalculations([])}\n              className=\"text-sm text-gray-600 hover:text-gray-800\"\n            >\n              Clear Selection\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Calculations List */}\n      <div className=\"space-y-4\">\n        {filteredAndSortedCalculations.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            {calculations.length === 0 ? 'No calculations found' : 'No calculations match your filters'}\n          </div>\n        ) : (\n          <>\n            {/* Select All */}\n            <div className=\"flex items-center gap-2 pb-2 border-b border-gray-200\">\n              <input\n                type=\"checkbox\"\n                checked={selectedCalculations.length === filteredAndSortedCalculations.length && filteredAndSortedCalculations.length > 0}\n                onChange={handleSelectAll}\n                className=\"form-checkbox\"\n              />\n              <span className=\"text-sm text-gray-600\">Select All</span>\n            </div>\n\n            {filteredAndSortedCalculations.map((calculation) => {\n              if (!calculation) return null;\n              \n              return (\n              <div\n                key={calculation._id}\n                className={`border rounded-lg p-4 transition-colors ${\n                  calculation._id && selectedCalculations.includes(calculation._id)\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-start gap-4\">\n                  <input\n                    type=\"checkbox\"\n                    checked={calculation._id ? selectedCalculations.includes(calculation._id) : false}\n                    onChange={() => handleSelectCalculation(calculation._id)}\n                    className=\"form-checkbox mt-1\"\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-gray-900\">\n                        {calculation.customerName}\n                      </h3>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          calculation.results.profit > 0\n                            ? 'bg-green-100 text-green-800'\n                            : 'bg-red-100 text-red-800'\n                        }`}>\n                          {calculation.results.profit > 0 ? '+' : ''}{calculation.results.profit.toFixed(2)} DKK\n                        </span>\n                        <span className=\"text-sm text-gray-500\">\n                          {new Date(calculation.createdAt).toLocaleDateString('da-DK')}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Total Stake:</span>\n                        <div className=\"font-medium\">{calculation.results.totalStake.toFixed(2)} DKK</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Actual Cost:</span>\n                        <div className=\"font-medium\">{calculation.results.totalActualCost.toFixed(2)} DKK</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Min Return:</span>\n                        <div className=\"font-medium\">\n                          {Math.min(\n                            calculation.results.potentialReturns.team1,\n                            calculation.results.potentialReturns.draw,\n                            calculation.results.potentialReturns.team2\n                          ).toFixed(2)} DKK\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Max Return:</span>\n                        <div className=\"font-medium\">\n                          {Math.max(\n                            calculation.results.potentialReturns.team1,\n                            calculation.results.potentialReturns.draw,\n                            calculation.results.potentialReturns.team2\n                          ).toFixed(2)} DKK\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 mt-3\">\n                      <button\n                        onClick={() => {\n                          const csvContent = exportCalculationResults(calculation.results, {\n                            id: calculation._id || '',\n                            name: calculation.customerName,\n                            teamNames: calculation.teamNames,\n                            bookmakers: calculation.bookmakers.map(bm => ({\n                              ...bm,\n                              hasBonus: bm.bonusType !== 'none'\n                            })),\n                            betType: calculation.betType\n                          });\n                          downloadCsvFile(csvContent, `calculation_${calculation._id}.csv`);\n                        }}\n                        className=\"btn-secondary text-sm\"\n                      >\n                        Export CSV\n                      </button>\n                      <button\n                        onClick={() => calculation._id && deleteCalculation(calculation._id)}\n                        className=\"btn-danger text-sm\"\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              );\n            })}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}