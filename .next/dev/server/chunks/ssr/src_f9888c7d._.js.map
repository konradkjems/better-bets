{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/lib/calculator.ts"],"sourcesContent":["// Calculator module for React integration\n\nexport interface BookmakerInfo {\n    name: string;\n    fixedStake: number;\n    hasBonus: boolean;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    bonusType?: 'freebet' | 'matchingBonus' | 'none';\n    bonusAmount?: number;\n    bonusMinOdds?: number;\n    qualifyingBetAmount?: number;\n    isBonusLocked?: boolean;\n    usedInBet1?: boolean;\n    bonusOnlyIfLost?: boolean;\n    bet1Lost?: boolean;\n    bet1Balance?: number;\n    bet1Profit?: number;\n    odds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface TeamNames {\n    team1: string;\n    team2: string;\n}\n\nexport interface BookmakerOdds {\n    name: string;\n    team1: number;\n    draw: number;\n    team2: number;\n    fixedStake: number;\n    actualCost: number;\n    minOdds: number;\n    preferLoss?: boolean;\n    avoidWin?: boolean;\n    isActive: boolean;\n    betType?: 'team1' | 'draw' | 'team2';\n    originalOdds?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    favoritType?: 'team1' | 'team2';\n    underdogType?: 'team1' | 'team2';\n    returns?: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n}\n\nexport interface Customer {\n    id: string;\n    name: string;\n    bookmakers: BookmakerInfo[];\n    teamNames?: TeamNames;\n    betType: 'qualifying' | 'bonus';\n}\n\nexport interface ArbitrageResult {\n    allBookmakers: {\n        name: string;\n        team1Odds: number;\n        drawOdds: number;\n        team2Odds: number;\n        fixedStake: number;\n        actualCost: number;\n        minOdds: number;\n        betType: 'team1' | 'draw' | 'team2';\n        potentialReturn: number;\n    }[];\n    totalStake: number;\n    totalActualCost: number;\n    potentialReturns: {\n        team1: number;\n        draw: number;\n        team2: number;\n    };\n    profit: number;\n    profitPercentage: number;\n    isArbitrage: boolean;\n}\n\nconst BOOKMAKERS: BookmakerInfo[] = [\n    { name: 'Unibet', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.4, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.4, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet365', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.2, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.2, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'LeoVegas', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'ComeOn', fixedStake: 2000, hasBonus: true, actualCost: 1000, minOdds: 1.8, preferLoss: true, isActive: true, bonusType: 'matchingBonus', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Mr Green', fixedStake: 300, hasBonus: false, actualCost: 300, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 300, bonusMinOdds: 1.8, qualifyingBetAmount: 300, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'NordicBet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bwin', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.8, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: '888sport', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 2.0, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 2.0, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Bet25', fixedStake: 250, hasBonus: false, actualCost: 250, minOdds: 1.95, isActive: true, bonusType: 'matchingBonus', bonusAmount: 250, bonusMinOdds: 1.95, qualifyingBetAmount: 250, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Expekt', fixedStake: 1000, hasBonus: false, actualCost: 1000, minOdds: 1.5, isActive: true, bonusType: 'freebet', bonusAmount: 1000, bonusMinOdds: 1.5, qualifyingBetAmount: 1000, usedInBet1: true, bonusOnlyIfLost: true },\n    { name: 'Cashpoint', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 500, bonusMinOdds: 1.8, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Jackpotbet', fixedStake: 500, hasBonus: false, actualCost: 500, minOdds: 1.5, isActive: true, bonusType: 'matchingBonus', bonusAmount: 500, bonusMinOdds: 1.5, qualifyingBetAmount: 500, usedInBet1: true, bonusOnlyIfLost: false },\n    { name: 'Getlucky', fixedStake: 100, hasBonus: false, actualCost: 100, minOdds: 1.8, isActive: true, bonusType: 'freebet', bonusAmount: 100, bonusMinOdds: 1.8, qualifyingBetAmount: 100, usedInBet1: true, bonusOnlyIfLost: false }\n];\n\n// Global state\nlet customers: Customer[] = [];\nlet currentCustomerId: string | null = null;\nlet currentBetType: 'qualifying' | 'bonus' = 'qualifying';\nlet lastCalculatedResult: ArbitrageResult | null = null;\n\nexport function getCurrentCustomer(): Customer {\n    return customers.find(c => c.id === currentCustomerId) || customers[0];\n}\n\nexport function generateBookmakerId(bookmakerName: string): string {\n    return bookmakerName.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n}\n\n// Core arbitrage calculation function\nexport function calculateArbitrage(oddsData: BookmakerOdds[], customer: Customer): ArbitrageResult {\n    const isQualifyingBet = customer.betType === 'qualifying';\n\n    // Beregn potentielle returns for hver bookmaker for hvert udfald\n    const bookmakerReturns = oddsData.map(bm => {\n        const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n\n        // Opdater calculateReturn til at tjekke for freebet uafhængigt af betType\n        const calculateReturn = (odds: number, stake: number, isFreebet: boolean) => {\n            if (isFreebet) {\n                return (odds - 1) * stake; // Kun gevinst, ikke indsats tilbage for freebets\n            }\n            return odds * stake; // Normal beregning\n        };\n\n        // Find det laveste odds (favorit) for denne bookmaker\n        const team1Odds = bm.team1 || Infinity;\n        const team2Odds = bm.team2 || Infinity;\n        const favoritType = team1Odds <= team2Odds ? 'team1' as const : 'team2' as const;\n        const underdogType = team1Odds <= team2Odds ? 'team2' as const : 'team1' as const;\n\n        // Kald calculateReturn med isFreebet parameter\n        return {\n            ...bm,\n            favoritType,\n            underdogType,\n            returns: {\n                team1: calculateReturn(bm.team1, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                draw: calculateReturn(bm.draw, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet'),\n                team2: calculateReturn(bm.team2, bm.fixedStake, bookmakerInfo?.bonusType === 'freebet')\n            }\n        };\n    });\n\n    // Find target return (gennemsnit af alle mulige returns)\n    const totalPossibleReturn = bookmakerReturns.reduce((sum, bm) => \n        sum + (bm.returns?.team1 || 0) + (bm.returns?.draw || 0) + (bm.returns?.team2 || 0), 0);\n    const targetReturnPerOutcome = totalPossibleReturn / 3;\n\n    let bestDistribution = {\n        team1: [] as BookmakerOdds[],\n        draw: [] as BookmakerOdds[],\n        team2: [] as BookmakerOdds[],\n        deviation: Infinity\n    };\n\n    // Funktion til at evaluere en distribution\n    const evaluateDistribution = (team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]): number => {\n        const calculateReturnForBet = (bm: BookmakerOdds, odds: number) => {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n            if (!isQualifyingBet && bookmakerInfo?.bonusType === 'freebet') {\n                return (odds - 1) * bm.fixedStake;\n            }\n            return odds * bm.fixedStake;\n        };\n\n        const team1Return = team1.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team1), 0);\n        const drawReturn = draw.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.draw), 0);\n        const team2Return = team2.reduce((sum, bm) => sum + calculateReturnForBet(bm, bm.team2), 0);\n\n        // Beregn afvigelse fra target\n        const maxReturn = Math.max(team1Return, drawReturn, team2Return);\n        const minReturn = Math.min(team1Return, drawReturn, team2Return);\n        const avgReturn = (team1Return + drawReturn + team2Return) / 3;\n\n        // Straf større afvigelser hårdere ved at kvadrere forskellen\n        const baseDeviation = Math.pow(maxReturn - minReturn, 2) + \n                            Math.pow(Math.abs(team1Return - avgReturn), 2) +\n                            Math.pow(Math.abs(drawReturn - avgReturn), 2) +\n                            Math.pow(Math.abs(team2Return - avgReturn), 2);\n\n        let penalty = 0;\n\n        // Specialregler for kvalificerende bets\n        if (isQualifyingBet) {\n            // Tæl \"kun hvis tab\"-freebets på hvert udfald\n            const bonusOnlyIfLostFreebets = [...team1, ...draw, ...team2].filter(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                return bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet';\n            });\n            \n            const team1BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team1').length;\n            const drawBonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'draw').length;\n            const team2BonusOnlyIfLost = bonusOnlyIfLostFreebets.filter(bm => bm.betType === 'team2').length;\n            \n            // Straf hvis \"kun hvis tab\"-freebets ikke er balanceret fordelt\n            const totalBonusOnlyIfLost = team1BonusOnlyIfLost + drawBonusOnlyIfLost + team2BonusOnlyIfLost;\n            if (totalBonusOnlyIfLost > 0) {\n                const idealPerOutcome = totalBonusOnlyIfLost / 3;\n                const deviation = Math.abs(team1BonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(drawBonusOnlyIfLost - idealPerOutcome) + \n                                Math.abs(team2BonusOnlyIfLost - idealPerOutcome);\n                penalty += deviation * 10000; // Stor straf for ubalanceret fordeling\n            }\n\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // Straf hvis vi bruger en bookmaker uden bonus i kvalificerende fase\n                if (!bookmakerInfo?.bonusType || bookmakerInfo.bonusType === 'none') {\n                    penalty += 5000;\n                }\n\n                // Tjek om odds er over minimum for bonus\n                if (bookmakerInfo?.bonusMinOdds) {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    if (placedOdds < bookmakerInfo.bonusMinOdds) {\n                        penalty += 10000; // Stor straf hvis odds er under minimum for bonus\n                    }\n                }\n\n                // Specialregel for \"kun hvis tabt\" bonusser - vi vil gerne tabe på disse bookmakere\n                if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                    // Find den højeste odds (underdog) for denne bookmaker\n                    const team1Odds = bm.team1 || 0;\n                    const team2Odds = bm.team2 || 0;\n                    const underdogType = team1Odds >= team2Odds ? 'team1' : 'team2';\n                    \n                    // Hvis vi spiller på underdog'en (laveste sandsynlighed for gevinst), giv bonus\n                    if (bm.betType === underdogType) {\n                        penalty -= 2000; // Bonus for at spille på underdog'en\n                    } else {\n                        penalty += 5000; // Straf for at spille på favoritten\n                    }\n                }\n            });\n        }\n\n        // Specialregler for bonus bets (freebets)\n        if (!isQualifyingBet) {\n            [...team1, ...draw, ...team2].forEach(bm => {\n                const bookmakerInfo = customer.bookmakers.find(b => b.name === bm.name);\n                \n                // For freebets vil vi gerne have højere odds for at maksimere gevinst\n                // men stadig holde det balanceret\n                if (bookmakerInfo?.bonusType === 'freebet') {\n                    const placedOdds = bm.betType === 'team1' ? bm.team1 :\n                                     bm.betType === 'draw' ? bm.draw :\n                                     bm.team2;\n                    // Mindre aggressiv bonus for højere odds\n                    penalty -= (placedOdds - bookmakerInfo.minOdds) * 100;\n                }\n\n                // Straf for meget ubalancerede returns i Bet 2\n                const returnSpread = maxReturn - minReturn;\n                if (returnSpread > avgReturn * 0.1) { // Hvis spredningen er mere end 10% af gennemsnittet\n                    penalty += Math.pow(returnSpread, 2);\n                }\n            });\n        }\n\n        // Generelle regler for alle typer bets\n        const comeOnBet = [...team1, ...draw, ...team2].find(bm => bm.name === 'ComeOn');\n        if (comeOnBet) {\n            const comeOnData = bookmakerReturns.find(bm => bm.name === 'ComeOn');\n            if (comeOnData) {\n                const isOnFavorit = comeOnBet.betType === comeOnData.favoritType;\n                const isOnDraw = comeOnBet.betType === 'draw';\n                if (isOnFavorit || isOnDraw) {\n                    penalty += 50000;\n                }\n            }\n        }\n\n        return baseDeviation + penalty;\n    };\n\n    // Prøv forskellige kombinationer\n    const tryDistribution = (remaining: typeof bookmakerReturns, team1: BookmakerOdds[], draw: BookmakerOdds[], team2: BookmakerOdds[]) => {\n        if (remaining.length === 0) {\n            const deviation = evaluateDistribution(team1, draw, team2);\n            if (deviation < bestDistribution.deviation) {\n                bestDistribution = { team1, draw, team2, deviation };\n            }\n            return;\n        }\n\n        const [current, ...rest] = remaining;\n        \n        // Beregn nuværende returns for hver gruppe\n        const currentTeam1 = team1.reduce((sum, bm) => sum + bm.team1 * bm.fixedStake, 0);\n        const currentDraw = draw.reduce((sum, bm) => sum + bm.draw * bm.fixedStake, 0);\n        const currentTeam2 = team2.reduce((sum, bm) => sum + bm.team2 * bm.fixedStake, 0);\n\n        // Specialhåndtering for ComeOn - skal altid på det modsatte hold af favoritten\n        if (current.name === 'ComeOn') {\n            const team1Odds = current.team1 || Infinity;\n            const team2Odds = current.team2 || Infinity;\n            \n            // Find ud af hvilket hold der er favoritten (laveste odds)\n            const favoritType = team1Odds <= team2Odds ? 'team1' : 'team2';\n            \n            // Placer ComeOn på det modsatte hold af favoritten\n            if (favoritType === 'team1' && current.team2 > 0) {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            } else if (favoritType === 'team2' && current.team1 > 0) {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            }\n            return;\n        }\n\n        // Prioriter placering baseret på bookmaker præferencer\n        let priorities: Array<{ type: 'team1' | 'draw' | 'team2'; need: number; odds: number; current: BookmakerOdds[] }> = [];\n        \n        // Specialhåndtering for \"kun hvis tab\"-freebets i kvalificerende bets\n        if (isQualifyingBet) {\n            const bookmakerInfo = customer.bookmakers.find(b => b.name === current.name);\n            if (bookmakerInfo?.bonusOnlyIfLost && bookmakerInfo.bonusType === 'freebet') {\n                // Tæl hvor mange \"kun hvis tab\"-freebets der allerede er på hvert udfald\n                const existingBonusOnlyIfLost = [...team1, ...draw, ...team2].filter(bm => {\n                    const bmInfo = customer.bookmakers.find(b => b.name === bm.name);\n                    return bmInfo?.bonusOnlyIfLost && bmInfo.bonusType === 'freebet';\n                });\n                \n                const team1Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team1').length;\n                const drawCount = existingBonusOnlyIfLost.filter(bm => bm.betType === 'draw').length;\n                const team2Count = existingBonusOnlyIfLost.filter(bm => bm.betType === 'team2').length;\n                \n                // Prioriter det udfald der har færrest \"kun hvis tab\"-freebets\n                priorities = [\n                    { type: 'team1' as const, need: -team1Count, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -drawCount, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -team2Count, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need); // Laveste count først\n            }\n        }\n        \n        // Hvis der ikke er sat nogen prioriteter endnu, brug standard logik\n        if (priorities.length === 0) {\n            if (current.preferLoss) {\n                // For bookmakere der foretrækker tab, placer dem hvor der er lavest return\n                priorities = [\n                    { type: 'team1' as const, need: -currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: -currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: -currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => a.need - b.need);\n            } else {\n                // For normale bookmakere, placer dem hvor der er størst behov\n                priorities = [\n                    { type: 'team1' as const, need: targetReturnPerOutcome - currentTeam1, odds: current.team1, current: team1 },\n                    { type: 'draw' as const, need: targetReturnPerOutcome - currentDraw, odds: current.draw, current: draw },\n                    { type: 'team2' as const, need: targetReturnPerOutcome - currentTeam2, odds: current.team2, current: team2 }\n                ]\n                .filter(p => p.odds > 0) // Fjern muligheder hvor odds er 0\n                .sort((a, b) => b.need - a.need);\n            }\n        }\n\n        // Hvis der ikke er nogen gyldige muligheder, spring denne bookmaker over\n        if (priorities.length === 0) return;\n\n        // Prøv fordelingerne i prioriteret rækkefølge\n        for (const group of priorities) {\n            if (group.type === 'team1') {\n                tryDistribution(rest, [...team1, current], draw, team2);\n            } else if (group.type === 'draw') {\n                tryDistribution(rest, team1, [...draw, current], team2);\n            } else {\n                tryDistribution(rest, team1, draw, [...team2, current]);\n            }\n        }\n    };\n\n    tryDistribution(bookmakerReturns, [], [], []);\n\n    // Konverter den bedste fordeling til det forventede format\n    const allBookmakers = oddsData.map(bm => {\n        let betType: 'team1' | 'draw' | 'team2';\n        let potentialReturn: number;\n\n        if (bestDistribution.team1.find(b => b.name === bm.name)) {\n            betType = 'team1';\n            potentialReturn = bm.team1 * bm.fixedStake;\n        } else if (bestDistribution.draw.find(b => b.name === bm.name)) {\n            betType = 'draw';\n            potentialReturn = bm.draw * bm.fixedStake;\n        } else {\n            betType = 'team2';\n            potentialReturn = bm.team2 * bm.fixedStake;\n        }\n\n        return {\n            name: bm.name,\n            team1Odds: bm.team1,\n            drawOdds: bm.draw,\n            team2Odds: bm.team2,\n            fixedStake: bm.fixedStake,\n            actualCost: bm.actualCost,\n            minOdds: bm.minOdds,\n            preferLoss: bm.preferLoss,\n            avoidWin: bm.avoidWin,\n            betType,\n            potentialReturn\n        };\n    });\n\n    const totalStake = allBookmakers.reduce((sum, bm) => sum + bm.fixedStake, 0);\n    const totalActualCost = allBookmakers.reduce((sum, bm) => sum + bm.actualCost, 0);\n\n    const potentialReturns = {\n        team1: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team1' ? bm.potentialReturn : 0), 0),\n        draw: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'draw' ? bm.potentialReturn : 0), 0),\n        team2: allBookmakers.reduce((sum, bm) => sum + (bm.betType === 'team2' ? bm.potentialReturn : 0), 0)\n    };\n\n    const minReturn = Math.min(\n        potentialReturns.team1,\n        potentialReturns.draw,\n        potentialReturns.team2\n    );\n\n    const profit = minReturn - totalActualCost;\n    const profitPercentage = (profit / totalActualCost) * 100;\n    const isArbitrage = profit > 0;\n\n    return {\n        allBookmakers,\n        totalStake,\n        totalActualCost,\n        potentialReturns,\n        profit,\n        profitPercentage,\n        isArbitrage\n    };\n}\n\n// Utility function to gather odds data from customer bookmakers\nexport function gatherOddsData(customer: Customer): BookmakerOdds[] {\n    const isBet2 = customer.betType === 'bonus';\n\n    return customer.bookmakers.map(bookmaker => {\n        const odds = bookmaker.odds || { team1: 0, draw: 0, team2: 0 };\n\n        // Bestem stake og actual cost baseret på bet type og bonus type\n        let stake = bookmaker.fixedStake;\n        let actualCost = bookmaker.actualCost;\n\n        if (isBet2) {\n            if (!bookmaker.usedInBet1) {\n                // Hvis siden ikke blev brugt i Bet 1, skal den ikke inkluderes\n                stake = 0;\n                actualCost = 0;\n            } else if (bookmaker.bonusType === 'matchingBonus') {\n                // For matching bonus, brug den indtastede saldo\n                stake = bookmaker.bet1Balance || 0;\n                // Actual cost skal være lig med den oprindelige indbetaling, uanset saldo\n                actualCost = bookmaker.qualifyingBetAmount || 0;\n            } else if (bookmaker.bonusType === 'freebet') {\n                // For freebets, tjek om bonus er tilgængelig\n                if (bookmaker.bonusOnlyIfLost && bookmaker.bet1Lost === false) {\n                    // Hvis bonus kun gives ved tab, men vi vandt, så ingen bonus\n                    stake = 0;\n                    actualCost = 0;\n                } else {\n                    // For freebets, brug bonus beløbet\n                    stake = bookmaker.bonusAmount || 0;\n                    // Actual cost skal være lig med freebet beløbet\n                    actualCost = bookmaker.bonusAmount || 0;\n                }\n            }\n        }\n\n        // Marker odds under minimum ved at sætte dem til 0\n        const validTeam1 = odds.team1 >= bookmaker.minOdds ? odds.team1 : 0;\n        const validDraw = odds.draw >= bookmaker.minOdds ? odds.draw : 0;\n        const validTeam2 = odds.team2 >= bookmaker.minOdds ? odds.team2 : 0;\n\n        return {\n            name: bookmaker.name,\n            fixedStake: stake,  // Brug den beregnede stake\n            actualCost: actualCost,  // Brug den beregnede actual cost\n            minOdds: bookmaker.minOdds,\n            preferLoss: bookmaker.preferLoss,\n            avoidWin: bookmaker.avoidWin,\n            isActive: bookmaker.isActive,\n            team1: validTeam1,\n            draw: validDraw,\n            team2: validTeam2,\n            originalOdds: {\n                team1: odds.team1,\n                draw: odds.draw,\n                team2: odds.team2\n            }\n        };\n    }).filter(odds => {\n        // I Bet 2, tjek også at der er en gyldig stake og at siden blev brugt i Bet 1\n        const hasValidStake = !isBet2 || odds.fixedStake > 0;\n        const isUsedInBet2 = !isBet2 || customer.bookmakers.find(b => b.name === odds.name)?.usedInBet1;\n        // Tjek at mindst ét gyldigt odds er indtastet og at bookmakeren er aktiv\n        const hasValidOdds = odds.team1 > 0 || odds.draw > 0 || odds.team2 > 0;\n        return hasValidOdds && odds.isActive && hasValidStake && isUsedInBet2;\n    });\n}\n\n// CSV template generation\nexport function generateCsvTemplate(customers: Customer[]): string {\n    const bookmakers = customers.length === 0 ? BOOKMAKERS : customers[0].bookmakers;\n    const headers = ['Bookmaker', 'Hold 1', 'Uafgjort', 'Hold 2'];\n    \n    const rows = bookmakers.map(bookmaker => [bookmaker.name, '', '', '']);\n    \n    const csvContent = '\\uFEFF' + [\n        headers.join(','),\n        ...rows.map(row => row.join(','))\n    ].join('\\r\\n');\n    \n    return csvContent;\n}\n\n// Parse CSV data\nexport function parseCsvData(csvContent: string, customer: Customer): number {\n    try {\n        const lines = csvContent.split('\\n').filter(line => line.trim());\n        const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n        \n        // Support both Danish and English column names\n        const bookmakerIndex = headers.findIndex(h => \n            h.includes('bookmaker') || h.includes('bookie') || h.includes('site')\n        );\n        const team1Index = headers.findIndex(h => \n            h.includes('team1') || h.includes('hold 1') || h.includes('home')\n        );\n        const drawIndex = headers.findIndex(h => \n            h.includes('draw') || h.includes('uafgjort') || h.includes('x')\n        );\n        const team2Index = headers.findIndex(h => \n            h.includes('team2') || h.includes('hold 2') || h.includes('away')\n        );\n\n        if (bookmakerIndex === -1 || team1Index === -1 || drawIndex === -1 || team2Index === -1) {\n            throw new Error('CSV skal indeholde kolonner med bookmaker navn og odds for alle tre udfald');\n        }\n\n        let uploadedCount = 0;\n\n        // Parse data rows\n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split(',').map(v => v.trim());\n            \n            if (values.length < Math.max(bookmakerIndex, team1Index, drawIndex, team2Index) + 1) {\n                continue; // Skip incomplete rows\n            }\n\n            const bookmakerName = values[bookmakerIndex];\n            const team1OddsStr = values[team1Index].replace(',', '.'); // Handle Danish decimal separator\n            const drawOddsStr = values[drawIndex].replace(',', '.');\n            const team2OddsStr = values[team2Index].replace(',', '.');\n            \n            const team1Odds = parseFloat(team1OddsStr);\n            const drawOdds = parseFloat(drawOddsStr);\n            const team2Odds = parseFloat(team2OddsStr);\n\n            // Skip if any odds are invalid\n            if (isNaN(team1Odds) || isNaN(drawOdds) || isNaN(team2Odds)) {\n                console.warn(`Skipping row ${i + 1}: Invalid odds for ${bookmakerName}`);\n                continue;\n            }\n\n            // Find matching bookmaker (case-insensitive)\n            const bookmakerIndex_inArray = customer.bookmakers.findIndex(bm => \n                bm.name.toLowerCase() === bookmakerName.toLowerCase()\n            );\n\n            if (bookmakerIndex_inArray !== -1) {\n                customer.bookmakers[bookmakerIndex_inArray].odds = {\n                    team1: team1Odds,\n                    draw: drawOdds,\n                    team2: team2Odds\n                };\n                customer.bookmakers[bookmakerIndex_inArray].isActive = true;\n                uploadedCount++;\n            } else {\n                console.warn(`Bookmaker not found: ${bookmakerName}`);\n            }\n        }\n\n        return uploadedCount;\n    } catch (error) {\n        console.error('Error parsing CSV:', error);\n        throw error;\n    }\n}\n\n// Save calculation function for React integration\nexport async function saveCalculation(calculationData: any, getToken: () => Promise<string>) {\n    try {\n        const token = await getToken();\n        const response = await fetch('/api/calculations/save', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n            body: JSON.stringify(calculationData),\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to save calculation');\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error('Error saving calculation:', error);\n        throw error;\n    }\n}\n\n// Export the main calculator functions that will be used by React\nexport {\n    BOOKMAKERS,\n    customers,\n    currentCustomerId,\n    currentBetType,\n    lastCalculatedResult\n};\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2F1C,MAAM,aAA8B;IAChC;QAAE,MAAM;QAAU,YAAY;QAAM,UAAU;QAAM,YAAY;QAAM,SAAS;QAAK,UAAU;QAAM,WAAW;QAAiB,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAM;IAC1O;QAAE,MAAM;QAAU,YAAY;QAAM,UAAU;QAAO,YAAY;QAAM,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAM;IACrO;QAAE,MAAM;QAAY,YAAY;QAAM,UAAU;QAAO,YAAY;QAAM,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAK;IACtO;QAAE,MAAM;QAAU,YAAY;QAAM,UAAU;QAAM,YAAY;QAAM,SAAS;QAAK,YAAY;QAAM,UAAU;QAAM,WAAW;QAAiB,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAM;IAC5P;QAAE,MAAM;QAAY,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IACnO;QAAE,MAAM;QAAa,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IACpO;QAAE,MAAM;QAAQ,YAAY;QAAM,UAAU;QAAO,YAAY;QAAM,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAM;IACnO;QAAE,MAAM;QAAY,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IACnO;QAAE,MAAM;QAAS,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAM,UAAU;QAAM,WAAW;QAAiB,aAAa;QAAK,cAAc;QAAM,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IACxO;QAAE,MAAM;QAAU,YAAY;QAAM,UAAU;QAAO,YAAY;QAAM,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAM,cAAc;QAAK,qBAAqB;QAAM,YAAY;QAAM,iBAAiB;IAAK;IACpO;QAAE,MAAM;QAAa,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IACpO;QAAE,MAAM;QAAc,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAiB,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;IAC3O;QAAE,MAAM;QAAY,YAAY;QAAK,UAAU;QAAO,YAAY;QAAK,SAAS;QAAK,UAAU;QAAM,WAAW;QAAW,aAAa;QAAK,cAAc;QAAK,qBAAqB;QAAK,YAAY;QAAM,iBAAiB;IAAM;CACtO;AAED,eAAe;AACf,IAAI,YAAwB,EAAE;AAC9B,IAAI,oBAAmC;AACvC,IAAI,iBAAyC;AAC7C,IAAI,uBAA+C;AAE5C,SAAS;IACZ,OAAO,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,sBAAsB,SAAS,CAAC,EAAE;AAC1E;AAEO,SAAS,oBAAoB,aAAqB;IACrD,OAAO,cAAc,OAAO,CAAC,iBAAiB,IAAI,WAAW;AACjE;AAGO,SAAS,mBAAmB,QAAyB,EAAE,QAAkB;IAC5E,MAAM,kBAAkB,SAAS,OAAO,KAAK;IAE7C,iEAAiE;IACjE,MAAM,mBAAmB,SAAS,GAAG,CAAC,CAAA;QAClC,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;QAEtE,0EAA0E;QAC1E,MAAM,kBAAkB,CAAC,MAAc,OAAe;YAClD,IAAI,WAAW;gBACX,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,iDAAiD;YAChF;YACA,OAAO,OAAO,OAAO,mBAAmB;QAC5C;QAEA,sDAAsD;QACtD,MAAM,YAAY,GAAG,KAAK,IAAI;QAC9B,MAAM,YAAY,GAAG,KAAK,IAAI;QAC9B,MAAM,cAAc,aAAa,YAAY,UAAmB;QAChE,MAAM,eAAe,aAAa,YAAY,UAAmB;QAEjE,+CAA+C;QAC/C,OAAO;YACH,GAAG,EAAE;YACL;YACA;YACA,SAAS;gBACL,OAAO,gBAAgB,GAAG,KAAK,EAAE,GAAG,UAAU,EAAE,eAAe,cAAc;gBAC7E,MAAM,gBAAgB,GAAG,IAAI,EAAE,GAAG,UAAU,EAAE,eAAe,cAAc;gBAC3E,OAAO,gBAAgB,GAAG,KAAK,EAAE,GAAG,UAAU,EAAE,eAAe,cAAc;YACjF;QACJ;IACJ;IAEA,yDAAyD;IACzD,MAAM,sBAAsB,iBAAiB,MAAM,CAAC,CAAC,KAAK,KACtD,MAAM,CAAC,GAAG,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,EAAE,SAAS,CAAC,GAAG;IACzF,MAAM,yBAAyB,sBAAsB;IAErD,IAAI,mBAAmB;QACnB,OAAO,EAAE;QACT,MAAM,EAAE;QACR,OAAO,EAAE;QACT,WAAW;IACf;IAEA,2CAA2C;IAC3C,MAAM,uBAAuB,CAAC,OAAwB,MAAuB;QACzE,MAAM,wBAAwB,CAAC,IAAmB;YAC9C,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;YACtE,IAAI,CAAC,mBAAmB,eAAe,cAAc,WAAW;gBAC5D,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU;YACrC;YACA,OAAO,OAAO,GAAG,UAAU;QAC/B;QAEA,MAAM,cAAc,MAAM,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,sBAAsB,IAAI,GAAG,KAAK,GAAG;QACzF,MAAM,aAAa,KAAK,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,sBAAsB,IAAI,GAAG,IAAI,GAAG;QACtF,MAAM,cAAc,MAAM,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,sBAAsB,IAAI,GAAG,KAAK,GAAG;QAEzF,8BAA8B;QAC9B,MAAM,YAAY,KAAK,GAAG,CAAC,aAAa,YAAY;QACpD,MAAM,YAAY,KAAK,GAAG,CAAC,aAAa,YAAY;QACpD,MAAM,YAAY,CAAC,cAAc,aAAa,WAAW,IAAI;QAE7D,6DAA6D;QAC7D,MAAM,gBAAgB,KAAK,GAAG,CAAC,YAAY,WAAW,KAClC,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,cAAc,YAAY,KAC5C,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,aAAa,YAAY,KAC3C,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,cAAc,YAAY;QAEhE,IAAI,UAAU;QAEd,wCAAwC;QACxC,IAAI,iBAAiB;YACjB,8CAA8C;YAC9C,MAAM,0BAA0B;mBAAI;mBAAU;mBAAS;aAAM,CAAC,MAAM,CAAC,CAAA;gBACjE,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;gBACtE,OAAO,eAAe,mBAAmB,cAAc,SAAS,KAAK;YACzE;YAEA,MAAM,uBAAuB,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,SAAS,MAAM;YAChG,MAAM,sBAAsB,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,QAAQ,MAAM;YAC9F,MAAM,uBAAuB,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,SAAS,MAAM;YAEhG,gEAAgE;YAChE,MAAM,uBAAuB,uBAAuB,sBAAsB;YAC1E,IAAI,uBAAuB,GAAG;gBAC1B,MAAM,kBAAkB,uBAAuB;gBAC/C,MAAM,YAAY,KAAK,GAAG,CAAC,uBAAuB,mBAClC,KAAK,GAAG,CAAC,sBAAsB,mBAC/B,KAAK,GAAG,CAAC,uBAAuB;gBAChD,WAAW,YAAY,OAAO,uCAAuC;YACzE;YAEA;mBAAI;mBAAU;mBAAS;aAAM,CAAC,OAAO,CAAC,CAAA;gBAClC,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;gBAEtE,qEAAqE;gBACrE,IAAI,CAAC,eAAe,aAAa,cAAc,SAAS,KAAK,QAAQ;oBACjE,WAAW;gBACf;gBAEA,yCAAyC;gBACzC,IAAI,eAAe,cAAc;oBAC7B,MAAM,aAAa,GAAG,OAAO,KAAK,UAAU,GAAG,KAAK,GACnC,GAAG,OAAO,KAAK,SAAS,GAAG,IAAI,GAC/B,GAAG,KAAK;oBACzB,IAAI,aAAa,cAAc,YAAY,EAAE;wBACzC,WAAW,OAAO,kDAAkD;oBACxE;gBACJ;gBAEA,oFAAoF;gBACpF,IAAI,eAAe,mBAAmB,cAAc,SAAS,KAAK,WAAW;oBACzE,uDAAuD;oBACvD,MAAM,YAAY,GAAG,KAAK,IAAI;oBAC9B,MAAM,YAAY,GAAG,KAAK,IAAI;oBAC9B,MAAM,eAAe,aAAa,YAAY,UAAU;oBAExD,gFAAgF;oBAChF,IAAI,GAAG,OAAO,KAAK,cAAc;wBAC7B,WAAW,MAAM,qCAAqC;oBAC1D,OAAO;wBACH,WAAW,MAAM,oCAAoC;oBACzD;gBACJ;YACJ;QACJ;QAEA,0CAA0C;QAC1C,IAAI,CAAC,iBAAiB;YAClB;mBAAI;mBAAU;mBAAS;aAAM,CAAC,OAAO,CAAC,CAAA;gBAClC,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;gBAEtE,sEAAsE;gBACtE,kCAAkC;gBAClC,IAAI,eAAe,cAAc,WAAW;oBACxC,MAAM,aAAa,GAAG,OAAO,KAAK,UAAU,GAAG,KAAK,GACnC,GAAG,OAAO,KAAK,SAAS,GAAG,IAAI,GAC/B,GAAG,KAAK;oBACzB,yCAAyC;oBACzC,WAAW,CAAC,aAAa,cAAc,OAAO,IAAI;gBACtD;gBAEA,+CAA+C;gBAC/C,MAAM,eAAe,YAAY;gBACjC,IAAI,eAAe,YAAY,KAAK;oBAChC,WAAW,KAAK,GAAG,CAAC,cAAc;gBACtC;YACJ;QACJ;QAEA,uCAAuC;QACvC,MAAM,YAAY;eAAI;eAAU;eAAS;SAAM,CAAC,IAAI,CAAC,CAAA,KAAM,GAAG,IAAI,KAAK;QACvE,IAAI,WAAW;YACX,MAAM,aAAa,iBAAiB,IAAI,CAAC,CAAA,KAAM,GAAG,IAAI,KAAK;YAC3D,IAAI,YAAY;gBACZ,MAAM,cAAc,UAAU,OAAO,KAAK,WAAW,WAAW;gBAChE,MAAM,WAAW,UAAU,OAAO,KAAK;gBACvC,IAAI,eAAe,UAAU;oBACzB,WAAW;gBACf;YACJ;QACJ;QAEA,OAAO,gBAAgB;IAC3B;IAEA,iCAAiC;IACjC,MAAM,kBAAkB,CAAC,WAAoC,OAAwB,MAAuB;QACxG,IAAI,UAAU,MAAM,KAAK,GAAG;YACxB,MAAM,YAAY,qBAAqB,OAAO,MAAM;YACpD,IAAI,YAAY,iBAAiB,SAAS,EAAE;gBACxC,mBAAmB;oBAAE;oBAAO;oBAAM;oBAAO;gBAAU;YACvD;YACA;QACJ;QAEA,MAAM,CAAC,SAAS,GAAG,KAAK,GAAG;QAE3B,2CAA2C;QAC3C,MAAM,eAAe,MAAM,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,GAAG,KAAK,GAAG,GAAG,UAAU,EAAE;QAC/E,MAAM,cAAc,KAAK,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,GAAG,IAAI,GAAG,GAAG,UAAU,EAAE;QAC5E,MAAM,eAAe,MAAM,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,GAAG,KAAK,GAAG,GAAG,UAAU,EAAE;QAE/E,+EAA+E;QAC/E,IAAI,QAAQ,IAAI,KAAK,UAAU;YAC3B,MAAM,YAAY,QAAQ,KAAK,IAAI;YACnC,MAAM,YAAY,QAAQ,KAAK,IAAI;YAEnC,2DAA2D;YAC3D,MAAM,cAAc,aAAa,YAAY,UAAU;YAEvD,mDAAmD;YACnD,IAAI,gBAAgB,WAAW,QAAQ,KAAK,GAAG,GAAG;gBAC9C,gBAAgB,MAAM,OAAO,MAAM;uBAAI;oBAAO;iBAAQ;YAC1D,OAAO,IAAI,gBAAgB,WAAW,QAAQ,KAAK,GAAG,GAAG;gBACrD,gBAAgB,MAAM;uBAAI;oBAAO;iBAAQ,EAAE,MAAM;YACrD;YACA;QACJ;QAEA,uDAAuD;QACvD,IAAI,aAAgH,EAAE;QAEtH,sEAAsE;QACtE,IAAI,iBAAiB;YACjB,MAAM,gBAAgB,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,QAAQ,IAAI;YAC3E,IAAI,eAAe,mBAAmB,cAAc,SAAS,KAAK,WAAW;gBACzE,yEAAyE;gBACzE,MAAM,0BAA0B;uBAAI;uBAAU;uBAAS;iBAAM,CAAC,MAAM,CAAC,CAAA;oBACjE,MAAM,SAAS,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI;oBAC/D,OAAO,QAAQ,mBAAmB,OAAO,SAAS,KAAK;gBAC3D;gBAEA,MAAM,aAAa,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,SAAS,MAAM;gBACtF,MAAM,YAAY,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,QAAQ,MAAM;gBACpF,MAAM,aAAa,wBAAwB,MAAM,CAAC,CAAA,KAAM,GAAG,OAAO,KAAK,SAAS,MAAM;gBAEtF,+DAA+D;gBAC/D,aAAa;oBACT;wBAAE,MAAM;wBAAkB,MAAM,CAAC;wBAAY,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;oBACjF;wBAAE,MAAM;wBAAiB,MAAM,CAAC;wBAAW,MAAM,QAAQ,IAAI;wBAAE,SAAS;oBAAK;oBAC7E;wBAAE,MAAM;wBAAkB,MAAM,CAAC;wBAAY,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;iBACpF,CACA,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,GAAG,kCAAkC;iBAC1D,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,GAAG,EAAE,IAAI,GAAG,sBAAsB;YAC5D;QACJ;QAEA,oEAAoE;QACpE,IAAI,WAAW,MAAM,KAAK,GAAG;YACzB,IAAI,QAAQ,UAAU,EAAE;gBACpB,2EAA2E;gBAC3E,aAAa;oBACT;wBAAE,MAAM;wBAAkB,MAAM,CAAC;wBAAc,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;oBACnF;wBAAE,MAAM;wBAAiB,MAAM,CAAC;wBAAa,MAAM,QAAQ,IAAI;wBAAE,SAAS;oBAAK;oBAC/E;wBAAE,MAAM;wBAAkB,MAAM,CAAC;wBAAc,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;iBACtF,CACA,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,GAAG,kCAAkC;iBAC1D,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,GAAG,EAAE,IAAI;YACnC,OAAO;gBACH,8DAA8D;gBAC9D,aAAa;oBACT;wBAAE,MAAM;wBAAkB,MAAM,yBAAyB;wBAAc,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;oBAC3G;wBAAE,MAAM;wBAAiB,MAAM,yBAAyB;wBAAa,MAAM,QAAQ,IAAI;wBAAE,SAAS;oBAAK;oBACvG;wBAAE,MAAM;wBAAkB,MAAM,yBAAyB;wBAAc,MAAM,QAAQ,KAAK;wBAAE,SAAS;oBAAM;iBAC9G,CACA,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,GAAG,kCAAkC;iBAC1D,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,IAAI,GAAG,EAAE,IAAI;YACnC;QACJ;QAEA,yEAAyE;QACzE,IAAI,WAAW,MAAM,KAAK,GAAG;QAE7B,8CAA8C;QAC9C,KAAK,MAAM,SAAS,WAAY;YAC5B,IAAI,MAAM,IAAI,KAAK,SAAS;gBACxB,gBAAgB,MAAM;uBAAI;oBAAO;iBAAQ,EAAE,MAAM;YACrD,OAAO,IAAI,MAAM,IAAI,KAAK,QAAQ;gBAC9B,gBAAgB,MAAM,OAAO;uBAAI;oBAAM;iBAAQ,EAAE;YACrD,OAAO;gBACH,gBAAgB,MAAM,OAAO,MAAM;uBAAI;oBAAO;iBAAQ;YAC1D;QACJ;IACJ;IAEA,gBAAgB,kBAAkB,EAAE,EAAE,EAAE,EAAE,EAAE;IAE5C,2DAA2D;IAC3D,MAAM,gBAAgB,SAAS,GAAG,CAAC,CAAA;QAC/B,IAAI;QACJ,IAAI;QAEJ,IAAI,iBAAiB,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI,GAAG;YACtD,UAAU;YACV,kBAAkB,GAAG,KAAK,GAAG,GAAG,UAAU;QAC9C,OAAO,IAAI,iBAAiB,IAAI,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,GAAG,IAAI,GAAG;YAC5D,UAAU;YACV,kBAAkB,GAAG,IAAI,GAAG,GAAG,UAAU;QAC7C,OAAO;YACH,UAAU;YACV,kBAAkB,GAAG,KAAK,GAAG,GAAG,UAAU;QAC9C;QAEA,OAAO;YACH,MAAM,GAAG,IAAI;YACb,WAAW,GAAG,KAAK;YACnB,UAAU,GAAG,IAAI;YACjB,WAAW,GAAG,KAAK;YACnB,YAAY,GAAG,UAAU;YACzB,YAAY,GAAG,UAAU;YACzB,SAAS,GAAG,OAAO;YACnB,YAAY,GAAG,UAAU;YACzB,UAAU,GAAG,QAAQ;YACrB;YACA;QACJ;IACJ;IAEA,MAAM,aAAa,cAAc,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,GAAG,UAAU,EAAE;IAC1E,MAAM,kBAAkB,cAAc,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,GAAG,UAAU,EAAE;IAE/E,MAAM,mBAAmB;QACrB,OAAO,cAAc,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,CAAC,GAAG,OAAO,KAAK,UAAU,GAAG,eAAe,GAAG,CAAC,GAAG;QAClG,MAAM,cAAc,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,CAAC,GAAG,OAAO,KAAK,SAAS,GAAG,eAAe,GAAG,CAAC,GAAG;QAChG,OAAO,cAAc,MAAM,CAAC,CAAC,KAAK,KAAO,MAAM,CAAC,GAAG,OAAO,KAAK,UAAU,GAAG,eAAe,GAAG,CAAC,GAAG;IACtG;IAEA,MAAM,YAAY,KAAK,GAAG,CACtB,iBAAiB,KAAK,EACtB,iBAAiB,IAAI,EACrB,iBAAiB,KAAK;IAG1B,MAAM,SAAS,YAAY;IAC3B,MAAM,mBAAmB,AAAC,SAAS,kBAAmB;IACtD,MAAM,cAAc,SAAS;IAE7B,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;AAGO,SAAS,eAAe,QAAkB;IAC7C,MAAM,SAAS,SAAS,OAAO,KAAK;IAEpC,OAAO,SAAS,UAAU,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,OAAO,UAAU,IAAI,IAAI;YAAE,OAAO;YAAG,MAAM;YAAG,OAAO;QAAE;QAE7D,gEAAgE;QAChE,IAAI,QAAQ,UAAU,UAAU;QAChC,IAAI,aAAa,UAAU,UAAU;QAErC,IAAI,QAAQ;YACR,IAAI,CAAC,UAAU,UAAU,EAAE;gBACvB,+DAA+D;gBAC/D,QAAQ;gBACR,aAAa;YACjB,OAAO,IAAI,UAAU,SAAS,KAAK,iBAAiB;gBAChD,gDAAgD;gBAChD,QAAQ,UAAU,WAAW,IAAI;gBACjC,0EAA0E;gBAC1E,aAAa,UAAU,mBAAmB,IAAI;YAClD,OAAO,IAAI,UAAU,SAAS,KAAK,WAAW;gBAC1C,6CAA6C;gBAC7C,IAAI,UAAU,eAAe,IAAI,UAAU,QAAQ,KAAK,OAAO;oBAC3D,6DAA6D;oBAC7D,QAAQ;oBACR,aAAa;gBACjB,OAAO;oBACH,mCAAmC;oBACnC,QAAQ,UAAU,WAAW,IAAI;oBACjC,gDAAgD;oBAChD,aAAa,UAAU,WAAW,IAAI;gBAC1C;YACJ;QACJ;QAEA,mDAAmD;QACnD,MAAM,aAAa,KAAK,KAAK,IAAI,UAAU,OAAO,GAAG,KAAK,KAAK,GAAG;QAClE,MAAM,YAAY,KAAK,IAAI,IAAI,UAAU,OAAO,GAAG,KAAK,IAAI,GAAG;QAC/D,MAAM,aAAa,KAAK,KAAK,IAAI,UAAU,OAAO,GAAG,KAAK,KAAK,GAAG;QAElE,OAAO;YACH,MAAM,UAAU,IAAI;YACpB,YAAY;YACZ,YAAY;YACZ,SAAS,UAAU,OAAO;YAC1B,YAAY,UAAU,UAAU;YAChC,UAAU,UAAU,QAAQ;YAC5B,UAAU,UAAU,QAAQ;YAC5B,OAAO;YACP,MAAM;YACN,OAAO;YACP,cAAc;gBACV,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;YACrB;QACJ;IACJ,GAAG,MAAM,CAAC,CAAA;QACN,8EAA8E;QAC9E,MAAM,gBAAgB,CAAC,UAAU,KAAK,UAAU,GAAG;QACnD,MAAM,eAAe,CAAC,UAAU,SAAS,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,KAAK,IAAI,GAAG;QACrF,yEAAyE;QACzE,MAAM,eAAe,KAAK,KAAK,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK,KAAK,GAAG;QACrE,OAAO,gBAAgB,KAAK,QAAQ,IAAI,iBAAiB;IAC7D;AACJ;AAGO,SAAS,oBAAoB,SAAqB;IACrD,MAAM,aAAa,UAAU,MAAM,KAAK,IAAI,aAAa,SAAS,CAAC,EAAE,CAAC,UAAU;IAChF,MAAM,UAAU;QAAC;QAAa;QAAU;QAAY;KAAS;IAE7D,MAAM,OAAO,WAAW,GAAG,CAAC,CAAA,YAAa;YAAC,UAAU,IAAI;YAAE;YAAI;YAAI;SAAG;IAErE,MAAM,aAAa,WAAW;QAC1B,QAAQ,IAAI,CAAC;WACV,KAAK,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC;KAC/B,CAAC,IAAI,CAAC;IAEP,OAAO;AACX;AAGO,SAAS,aAAa,UAAkB,EAAE,QAAkB;IAC/D,IAAI;QACA,MAAM,QAAQ,WAAW,KAAK,CAAC,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI;QAC7D,MAAM,UAAU,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,WAAW;QAEjE,+CAA+C;QAC/C,MAAM,iBAAiB,QAAQ,SAAS,CAAC,CAAA,IACrC,EAAE,QAAQ,CAAC,gBAAgB,EAAE,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC;QAElE,MAAM,aAAa,QAAQ,SAAS,CAAC,CAAA,IACjC,EAAE,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC;QAE9D,MAAM,YAAY,QAAQ,SAAS,CAAC,CAAA,IAChC,EAAE,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC;QAE/D,MAAM,aAAa,QAAQ,SAAS,CAAC,CAAA,IACjC,EAAE,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC;QAG9D,IAAI,mBAAmB,CAAC,KAAK,eAAe,CAAC,KAAK,cAAc,CAAC,KAAK,eAAe,CAAC,GAAG;YACrF,MAAM,IAAI,MAAM;QACpB;QAEA,IAAI,gBAAgB;QAEpB,kBAAkB;QAClB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YACnC,MAAM,SAAS,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;YAElD,IAAI,OAAO,MAAM,GAAG,KAAK,GAAG,CAAC,gBAAgB,YAAY,WAAW,cAAc,GAAG;gBACjF,UAAU,uBAAuB;YACrC;YAEA,MAAM,gBAAgB,MAAM,CAAC,eAAe;YAC5C,MAAM,eAAe,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,MAAM,kCAAkC;YAC7F,MAAM,cAAc,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK;YACnD,MAAM,eAAe,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK;YAErD,MAAM,YAAY,WAAW;YAC7B,MAAM,WAAW,WAAW;YAC5B,MAAM,YAAY,WAAW;YAE7B,+BAA+B;YAC/B,IAAI,MAAM,cAAc,MAAM,aAAa,MAAM,YAAY;gBACzD,QAAQ,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,EAAE,mBAAmB,EAAE,eAAe;gBACvE;YACJ;YAEA,6CAA6C;YAC7C,MAAM,yBAAyB,SAAS,UAAU,CAAC,SAAS,CAAC,CAAA,KACzD,GAAG,IAAI,CAAC,WAAW,OAAO,cAAc,WAAW;YAGvD,IAAI,2BAA2B,CAAC,GAAG;gBAC/B,SAAS,UAAU,CAAC,uBAAuB,CAAC,IAAI,GAAG;oBAC/C,OAAO;oBACP,MAAM;oBACN,OAAO;gBACX;gBACA,SAAS,UAAU,CAAC,uBAAuB,CAAC,QAAQ,GAAG;gBACvD;YACJ,OAAO;gBACH,QAAQ,IAAI,CAAC,CAAC,qBAAqB,EAAE,eAAe;YACxD;QACJ;QAEA,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM;IACV;AACJ;AAGO,eAAe,gBAAgB,eAAoB,EAAE,QAA+B;IACvF,IAAI;QACA,MAAM,QAAQ,MAAM;QACpB,MAAM,WAAW,MAAM,MAAM,0BAA0B;YACnD,QAAQ;YACR,SAAS;gBACL,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,OAAO;YACtC;YACA,MAAM,KAAK,SAAS,CAAC;QACzB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO,MAAM,SAAS,IAAI;IAC9B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACV;AACJ","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/lib/test-suite.ts"],"sourcesContent":["// Comprehensive testing utilities for Better Bets\nimport { Customer, BOOKMAKERS, calculateArbitrage, gatherOddsData } from '../lib/calculator';\n\n// Test data generators\nexport const testData = {\n  createTestCustomer: (name: string = 'Test Customer'): Customer => ({\n    id: `test-${Date.now()}`,\n    name,\n    bookmakers: BOOKMAKERS.map(bm => ({ ...bm })),\n    betType: 'qualifying',\n    teamNames: {\n      team1: 'Team A',\n      team2: 'Team B'\n    }\n  }),\n\n  createTestOdds: () => ({\n    team1: 2.5,\n    draw: 3.2,\n    team2: 2.8\n  }),\n\n  createTestCalculationResult: () => ({\n    isArbitrage: true,\n    profit: 15.50,\n    profitPercentage: 2.1,\n    totalStake: 750,\n    totalActualCost: 734.50,\n    potentialReturns: {\n      team1: 750,\n      draw: 750,\n      team2: 750\n    },\n    allBookmakers: [\n      {\n        name: 'Test Bookmaker 1',\n        betType: 'team1',\n        team1Odds: 2.5,\n        drawOdds: 3.2,\n        team2Odds: 2.8,\n        fixedStake: 300,\n        actualCost: 300\n      }\n    ]\n  })\n};\n\n// Test suite for calculator functions\nexport const calculatorTests = {\n  testArbitrageCalculation: () => {\n    console.log('🧮 Testing arbitrage calculation...');\n    \n    const customer = testData.createTestCustomer();\n    \n    // Add odds data to make the test more realistic\n    customer.bookmakers.forEach((bookmaker, index) => {\n      bookmaker.odds = {\n        team1: 2.0 + (index * 0.1),\n        draw: 3.0 + (index * 0.1),\n        team2: 2.5 + (index * 0.1)\n      };\n      bookmaker.isActive = true;\n    });\n    \n    console.log(`   Created customer with ${customer.bookmakers.length} bookmakers`);\n    console.log(`   Active bookmakers: ${customer.bookmakers.filter(bm => bm.isActive).length}`);\n    \n    const oddsData = gatherOddsData(customer);\n    console.log(`   Odds data collected: ${oddsData.length} entries`);\n    \n    if (oddsData.length === 0) {\n      console.log('❌ No odds data found - checking bookmaker states...');\n      customer.bookmakers.forEach((bm, index) => {\n        console.log(`   Bookmaker ${index}: ${bm.name}, Active: ${bm.isActive}, Odds: ${bm.odds ? 'Yes' : 'No'}`);\n      });\n      return false;\n    }\n    \n    try {\n      const result = calculateArbitrage(oddsData, customer);\n      console.log('✅ Arbitrage calculation successful');\n      console.log(`   Profit: ${result.profit.toFixed(2)} DKK`);\n      console.log(`   Profit %: ${result.profitPercentage.toFixed(2)}%`);\n      console.log(`   Total stake: ${result.totalStake.toFixed(2)} DKK`);\n      return true;\n    } catch (error) {\n      console.log('❌ Arbitrage calculation failed:', error);\n      console.log(`   Error details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      return false;\n    }\n  },\n\n  testOddsValidation: () => {\n    console.log('🔍 Testing odds validation...');\n    \n    const customer = testData.createTestCustomer();\n    const bookmaker = customer.bookmakers[0];\n    \n    // Test valid odds\n    bookmaker.odds = testData.createTestOdds();\n    bookmaker.isActive = true;\n    \n    const oddsData = gatherOddsData(customer);\n    const hasValidOdds = oddsData.length > 0;\n    \n    console.log(hasValidOdds ? '✅ Odds validation passed' : '❌ Odds validation failed');\n    return hasValidOdds;\n  },\n\n  testCustomerManagement: () => {\n    console.log('👤 Testing customer management...');\n    \n    const customer = testData.createTestCustomer();\n    const isValidCustomer = customer.id && customer.name && customer.bookmakers.length > 0;\n    \n    console.log(isValidCustomer ? '✅ Customer management passed' : '❌ Customer management failed');\n    return isValidCustomer;\n  }\n};\n\n// Test suite for API endpoints\nexport const apiTests = {\n  testCalculationsEndpoint: async () => {\n    console.log('🌐 Testing calculations API endpoint...');\n    \n    try {\n      const response = await fetch('/api/calculations/list');\n      const isValidResponse = response.status === 200 || response.status === 401; // 401 is expected without auth\n      \n      console.log(isValidResponse ? '✅ Calculations API endpoint accessible' : '❌ Calculations API endpoint failed');\n      return isValidResponse;\n    } catch (error) {\n      console.log('❌ Calculations API endpoint error:', error);\n      return false;\n    }\n  },\n\n  testHealthCheck: async () => {\n    console.log('🏥 Testing health check...');\n    \n    try {\n      const response = await fetch('/');\n      const isValidResponse = response.status === 200;\n      \n      console.log(isValidResponse ? '✅ Health check passed' : '❌ Health check failed');\n      return isValidResponse;\n    } catch (error) {\n      console.log('❌ Health check error:', error);\n      return false;\n    }\n  }\n};\n\n// Test suite for UI components\nexport const uiTests = {\n  testResponsiveDesign: () => {\n    console.log('📱 Testing responsive design...');\n    \n    const viewportSizes = [\n      { width: 320, height: 568, name: 'Mobile' },\n      { width: 768, height: 1024, name: 'Tablet' },\n      { width: 1920, height: 1080, name: 'Desktop' }\n    ];\n    \n    viewportSizes.forEach(size => {\n      // In a real test environment, you would set the viewport\n      console.log(`   ${size.name}: ${size.width}x${size.height}`);\n    });\n    \n    console.log('✅ Responsive design test completed');\n    return true;\n  },\n\n  testAccessibility: () => {\n    console.log('♿ Testing accessibility...');\n    \n    // Check for basic semantic elements\n    const hasMain = document.querySelector('main') !== null;\n    const hasNav = document.querySelector('nav') !== null;\n    const hasButtons = document.querySelectorAll('button').length > 0;\n    const hasHeadings = document.querySelectorAll('h1, h2, h3, h4, h5, h6').length > 0;\n    \n    console.log(`   Main element: ${hasMain ? '✅' : '❌'}`);\n    console.log(`   Navigation: ${hasNav ? '✅' : '❌'}`);\n    console.log(`   Buttons: ${hasButtons ? '✅' : '❌'}`);\n    console.log(`   Headings: ${hasHeadings ? '✅' : '❌'}`);\n    \n    // Check for ARIA attributes\n    const ariaLabels = document.querySelectorAll('[aria-label]').length;\n    const ariaRoles = document.querySelectorAll('[role]').length;\n    const ariaLive = document.querySelectorAll('[aria-live]').length;\n    \n    console.log(`   ARIA labels: ${ariaLabels}`);\n    console.log(`   ARIA roles: ${ariaRoles}`);\n    console.log(`   ARIA live regions: ${ariaLive}`);\n    \n    // Check for alt text on images\n    const images = document.querySelectorAll('img');\n    const hasAltText = images.length === 0 || Array.from(images).every(img => img.hasAttribute('alt'));\n    console.log(`   Image alt text: ${hasAltText ? '✅' : '❌'}`);\n    \n    // Calculate accessibility score (more lenient)\n    const basicElements = [hasMain, hasNav, hasButtons, hasHeadings].filter(Boolean).length;\n    const ariaElements = ariaLabels + ariaRoles + ariaLive;\n    const totalScore = basicElements + (ariaElements > 0 ? 1 : 0) + (hasAltText ? 1 : 0);\n    \n    console.log(`   Accessibility score: ${totalScore}/6`);\n    console.log(totalScore >= 4 ? '✅ Accessibility compliance passed' : '❌ Accessibility compliance needs improvement');\n    \n    return totalScore >= 4;\n  }\n};\n\n// Test suite for PWA features\nexport const pwaTests = {\n  testServiceWorker: () => {\n    console.log('🔧 Testing service worker...');\n    \n    const hasServiceWorker = 'serviceWorker' in navigator;\n    console.log(hasServiceWorker ? '✅ Service worker supported' : '❌ Service worker not supported');\n    return hasServiceWorker;\n  },\n\n  testManifest: async () => {\n    console.log('📋 Testing manifest...');\n    \n    try {\n      const response = await fetch('/manifest.json');\n      const isValidManifest = response.status === 200;\n      \n      if (isValidManifest) {\n        const manifest = await response.json();\n        const hasRequiredFields = manifest.name && manifest.short_name && manifest.icons;\n        console.log(hasRequiredFields ? '✅ Manifest valid' : '❌ Manifest missing required fields');\n        return hasRequiredFields;\n      } else {\n        console.log('❌ Manifest not found');\n        return false;\n      }\n    } catch (error) {\n      console.log('❌ Manifest test error:', error);\n      return false;\n    }\n  },\n\n  testOfflineCapability: () => {\n    console.log('📶 Testing offline capability...');\n    \n    const hasCacheAPI = 'caches' in window;\n    const hasIndexedDB = 'indexedDB' in window;\n    \n    console.log(hasCacheAPI ? '✅ Cache API available' : '❌ Cache API not available');\n    console.log(hasIndexedDB ? '✅ IndexedDB available' : '❌ IndexedDB not available');\n    \n    return hasCacheAPI && hasIndexedDB;\n  }\n};\n\n// Performance tests\nexport const performanceTests = {\n  testPageLoadTime: () => {\n    console.log('⚡ Testing page load time...');\n    \n    if (typeof window !== 'undefined' && window.performance) {\n      const navigation = window.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const loadTime = navigation.loadEventEnd - navigation.loadEventStart;\n      \n      const isFastLoad = loadTime < 1000;\n      console.log(`   Load time: ${loadTime.toFixed(2)}ms`);\n      console.log(isFastLoad ? '✅ Page loads quickly' : '⚠️ Page load could be faster');\n      return isFastLoad;\n    }\n    \n    console.log('❌ Performance API not available');\n    return false;\n  },\n\n  testMemoryUsage: () => {\n    console.log('🧠 Testing memory usage...');\n    \n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      const memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // MB\n      \n      // More lenient threshold for development environment\n      const isLowMemory = memoryUsage < 60;\n      console.log(`   Memory usage: ${memoryUsage.toFixed(2)}MB`);\n      console.log(isLowMemory ? '✅ Memory usage is acceptable' : '⚠️ Memory usage is high');\n      return isLowMemory;\n    }\n    \n    console.log('❌ Memory API not available');\n    return false;\n  }\n};\n\n// Main test runner\nexport const runAllTests = async () => {\n  console.log('🚀 Starting Better Bets Test Suite...\\n');\n  \n  const results = {\n    calculator: 0,\n    api: 0,\n    ui: 0,\n    pwa: 0,\n    performance: 0\n  };\n  \n  // Calculator tests\n  console.log('📊 CALCULATOR TESTS');\n  console.log('==================');\n  results.calculator += calculatorTests.testArbitrageCalculation() ? 1 : 0;\n  results.calculator += calculatorTests.testOddsValidation() ? 1 : 0;\n  results.calculator += calculatorTests.testCustomerManagement() ? 1 : 0;\n  \n  // API tests\n  console.log('\\n🌐 API TESTS');\n  console.log('============');\n  results.api += await apiTests.testCalculationsEndpoint() ? 1 : 0;\n  results.api += await apiTests.testHealthCheck() ? 1 : 0;\n  \n  // UI tests\n  console.log('\\n🎨 UI TESTS');\n  console.log('============');\n  results.ui += uiTests.testResponsiveDesign() ? 1 : 0;\n  results.ui += uiTests.testAccessibility() ? 1 : 0;\n  \n  // PWA tests\n  console.log('\\n📱 PWA TESTS');\n  console.log('=============');\n  results.pwa += pwaTests.testServiceWorker() ? 1 : 0;\n  results.pwa += await pwaTests.testManifest() ? 1 : 0;\n  results.pwa += pwaTests.testOfflineCapability() ? 1 : 0;\n  \n  // Performance tests\n  console.log('\\n⚡ PERFORMANCE TESTS');\n  console.log('====================');\n  results.performance += performanceTests.testPageLoadTime() ? 1 : 0;\n  results.performance += performanceTests.testMemoryUsage() ? 1 : 0;\n  \n  // Summary\n  console.log('\\n📋 TEST SUMMARY');\n  console.log('================');\n  console.log(`Calculator: ${results.calculator}/3 tests passed`);\n  console.log(`API: ${results.api}/2 tests passed`);\n  console.log(`UI: ${results.ui}/2 tests passed`);\n  console.log(`PWA: ${results.pwa}/3 tests passed`);\n  console.log(`Performance: ${results.performance}/2 tests passed`);\n  \n  const totalTests = Object.values(results).reduce((sum, count) => sum + count, 0);\n  const totalPossible = 12;\n  \n  console.log(`\\n🎯 Overall: ${totalTests}/${totalPossible} tests passed (${Math.round(totalTests/totalPossible*100)}%)`);\n  \n  if (totalTests === totalPossible) {\n    console.log('🎉 All tests passed! The application is ready for production.');\n  } else {\n    console.log('⚠️ Some tests failed. Please review the issues above.');\n  }\n  \n  return results;\n};\n\n// Export for use in browser console\nif (typeof window !== 'undefined') {\n  (window as any).testBetterBets = runAllTests;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":["file:///Users/konradkjems/Desktop/Cursor-Projects/better-bets/src/app/test/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { runAllTests } from '../../lib/test-suite';\n\ninterface TestResult {\n  category: string;\n  passed: number;\n  total: number;\n  percentage: number;\n}\n\nexport default function TestPage() {\n  const [isRunning, setIsRunning] = useState(false);\n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n  const [overallScore, setOverallScore] = useState<number | null>(null);\n  const [testLog, setTestLog] = useState<string[]>([]);\n\n  const runTests = async () => {\n    setIsRunning(true);\n    setTestLog([]);\n    setTestResults([]);\n    setOverallScore(null);\n\n    // Capture console.log output\n    const originalLog = console.log;\n    const logs: string[] = [];\n    \n    console.log = (...args) => {\n      logs.push(args.join(' '));\n      originalLog(...args);\n    };\n\n    try {\n      const results = await runAllTests();\n      \n      // Convert results to TestResult format\n      const testResults: TestResult[] = [\n        {\n          category: 'Calculator',\n          passed: results.calculator,\n          total: 3,\n          percentage: Math.round((results.calculator / 3) * 100)\n        },\n        {\n          category: 'API',\n          passed: results.api,\n          total: 2,\n          percentage: Math.round((results.api / 2) * 100)\n        },\n        {\n          category: 'UI',\n          passed: results.ui,\n          total: 2,\n          percentage: Math.round((results.ui / 2) * 100)\n        },\n        {\n          category: 'PWA',\n          passed: results.pwa,\n          total: 3,\n          percentage: Math.round((results.pwa / 3) * 100)\n        },\n        {\n          category: 'Performance',\n          passed: results.performance,\n          total: 2,\n          percentage: Math.round((results.performance / 2) * 100)\n        }\n      ];\n\n      setTestResults(testResults);\n      \n      const totalPassed = Object.values(results).reduce((sum, count) => sum + count, 0);\n      const totalPossible = 12;\n      setOverallScore(Math.round((totalPassed / totalPossible) * 100));\n      \n    } catch (error) {\n      console.error('Test execution failed:', error);\n    } finally {\n      console.log = originalLog;\n      setTestLog(logs);\n      setIsRunning(false);\n    }\n  };\n\n  const getScoreColor = (percentage: number) => {\n    if (percentage >= 90) return 'text-green-600';\n    if (percentage >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getScoreBgColor = (percentage: number) => {\n    if (percentage >= 90) return 'bg-green-100';\n    if (percentage >= 70) return 'bg-yellow-100';\n    return 'bg-red-100';\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Test Suite</h1>\n        <p className=\"text-gray-600\">\n          Comprehensive testing for Better Bets application\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Test Controls */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Test Controls</h2>\n          \n          <button\n            onClick={runTests}\n            disabled={isRunning}\n            className={`w-full py-3 px-4 rounded-lg font-semibold transition-colors ${\n              isRunning\n                ? 'bg-gray-400 text-gray-200 cursor-not-allowed'\n                : 'bg-blue-600 text-white hover:bg-blue-700'\n            }`}\n          >\n            {isRunning ? (\n              <div className=\"flex items-center justify-center gap-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                Running Tests...\n              </div>\n            ) : (\n              'Run All Tests'\n            )}\n          </button>\n\n          {overallScore !== null && (\n            <div className={`mt-6 p-4 rounded-lg ${getScoreBgColor(overallScore)}`}>\n              <div className=\"text-center\">\n                <div className={`text-3xl font-bold ${getScoreColor(overallScore)}`}>\n                  {overallScore}%\n                </div>\n                <div className=\"text-sm text-gray-600 mt-1\">\n                  Overall Test Score\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Test Results */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Test Results</h2>\n          \n          {testResults.length > 0 ? (\n            <div className=\"space-y-4\">\n              {testResults.map((result, index) => (\n                <div key={index} className=\"border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold text-gray-900\">{result.category}</h3>\n                    <span className={`px-2 py-1 rounded-full text-sm font-medium ${getScoreBgColor(result.percentage)} ${getScoreColor(result.percentage)}`}>\n                      {result.passed}/{result.total}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full transition-all duration-500 ${\n                        result.percentage >= 90 ? 'bg-green-500' :\n                        result.percentage >= 70 ? 'bg-yellow-500' : 'bg-red-500'\n                      }`}\n                      style={{ width: `${result.percentage}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mt-1\">\n                    {result.percentage}% passed\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              Click \"Run All Tests\" to see results\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Test Log */}\n      {testLog.length > 0 && (\n        <div className=\"mt-8 bg-white rounded-xl shadow-sm p-6\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Test Log</h2>\n          <div className=\"bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto\">\n            {testLog.map((log, index) => (\n              <div key={index} className=\"mb-1\">\n                {log}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Test Information */}\n      <div className=\"mt-8 bg-blue-50 rounded-xl p-6\">\n        <h2 className=\"text-xl font-bold text-blue-900 mb-4\">Test Categories</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div className=\"bg-white rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Calculator Tests</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Arbitrage calculation accuracy</li>\n              <li>• Odds validation</li>\n              <li>• Customer management</li>\n            </ul>\n          </div>\n          <div className=\"bg-white rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">API Tests</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Endpoint accessibility</li>\n              <li>• Health check</li>\n            </ul>\n          </div>\n          <div className=\"bg-white rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">UI Tests</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Responsive design</li>\n              <li>• Accessibility compliance</li>\n            </ul>\n          </div>\n          <div className=\"bg-white rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">PWA Tests</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Service worker support</li>\n              <li>• Manifest validation</li>\n              <li>• Offline capability</li>\n            </ul>\n          </div>\n          <div className=\"bg-white rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Performance Tests</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Page load time</li>\n              <li>• Memory usage</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}